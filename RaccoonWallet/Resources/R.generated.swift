//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 112 images.
  struct image {
    /// Image `about_logo`.
    static let about_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_logo")
    /// Image `about_open_external`.
    static let about_open_external = Rswift.ImageResource(bundle: R.hostingBundle, name: "about_open_external")
    /// Image `account_icon_default`.
    static let account_icon_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "account_icon_default")
    /// Image `bottom_nav_home`.
    static let bottom_nav_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_nav_home")
    /// Image `bottom_nav_qr_lab`.
    static let bottom_nav_qr_lab = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_nav_qr_lab")
    /// Image `bottom_nav_receive`.
    static let bottom_nav_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_nav_receive")
    /// Image `bottom_nav_scan`.
    static let bottom_nav_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_nav_scan")
    /// Image `bottom_nav_send`.
    static let bottom_nav_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_nav_send")
    /// Image `drawer_account_image_default`.
    static let drawer_account_image_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer_account_image_default")
    /// Image `heroimage_login_card`.
    static let heroimage_login_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_login_card")
    /// Image `heroimage_login_large`.
    static let heroimage_login_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_login_large")
    /// Image `heroimage_logo`.
    static let heroimage_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_logo")
    /// Image `heroimage_new_card`.
    static let heroimage_new_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_new_card")
    /// Image `heroimage_new_large`.
    static let heroimage_new_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_new_large")
    /// Image `heroimage_qr_labo_small`.
    static let heroimage_qr_labo_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_qr_labo_small")
    /// Image `heroimage_seclesson_large`.
    static let heroimage_seclesson_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_seclesson_large")
    /// Image `heroimage_seclesson_small`.
    static let heroimage_seclesson_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_seclesson_small")
    /// Image `heroimage_send_large`.
    static let heroimage_send_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_send_large")
    /// Image `heroimage_send_small`.
    static let heroimage_send_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_send_small")
    /// Image `heroimage_setting_large`.
    static let heroimage_setting_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_setting_large")
    /// Image `heroimage_transaction_small`.
    static let heroimage_transaction_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_transaction_small")
    /// Image `heroimage_wallet_large2`.
    static let heroimage_wallet_large2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_wallet_large2")
    /// Image `heroimage_wallet_large`.
    static let heroimage_wallet_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_wallet_large")
    /// Image `heroimage_wallet_small`.
    static let heroimage_wallet_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "heroimage_wallet_small")
    /// Image `ic_background`.
    static let ic_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_background")
    /// Image `icon_addressbook`.
    static let icon_addressbook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_addressbook")
    /// Image `icon_back`.
    static let icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back")
    /// Image `icon_balance`.
    static let icon_balance = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_balance")
    /// Image `icon_box_next`.
    static let icon_box_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_box_next")
    /// Image `icon_caution`.
    static let icon_caution = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_caution")
    /// Image `icon_check_gray_on`.
    static let icon_check_gray_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_check_gray_on")
    /// Image `icon_check_gray`.
    static let icon_check_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_check_gray")
    /// Image `icon_check_green`.
    static let icon_check_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_check_green")
    /// Image `icon_clipboard`.
    static let icon_clipboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_clipboard")
    /// Image `icon_close_circle`.
    static let icon_close_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_circle")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_dentaku`.
    static let icon_dentaku = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dentaku")
    /// Image `icon_dialog_close`.
    static let icon_dialog_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dialog_close")
    /// Image `icon_dialog_error`.
    static let icon_dialog_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dialog_error")
    /// Image `icon_dialog_fingerprint`.
    static let icon_dialog_fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dialog_fingerprint")
    /// Image `icon_dialog_success`.
    static let icon_dialog_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dialog_success")
    /// Image `icon_fingerprint_small`.
    static let icon_fingerprint_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_fingerprint_small")
    /// Image `icon_harvest_small`.
    static let icon_harvest_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_harvest_small")
    /// Image `icon_home_harvest`.
    static let icon_home_harvest = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_harvest")
    /// Image `icon_home_home_green`.
    static let icon_home_home_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_home_green")
    /// Image `icon_home_qr_labo_green`.
    static let icon_home_qr_labo_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_qr_labo_green")
    /// Image `icon_home_receive_green`.
    static let icon_home_receive_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_receive_green")
    /// Image `icon_home_scan_gray`.
    static let icon_home_scan_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_scan_gray")
    /// Image `icon_home_scan_green`.
    static let icon_home_scan_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_scan_green")
    /// Image `icon_home_send_green`.
    static let icon_home_send_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_send_green")
    /// Image `icon_home_transaction`.
    static let icon_home_transaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_transaction")
    /// Image `icon_link`.
    static let icon_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_link")
    /// Image `icon_list_next`.
    static let icon_list_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_list_next")
    /// Image `icon_list`.
    static let icon_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_list")
    /// Image `icon_menu_about`.
    static let icon_menu_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_about")
    /// Image `icon_menu_addressbook`.
    static let icon_menu_addressbook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_addressbook")
    /// Image `icon_menu_donate`.
    static let icon_menu_donate = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_donate")
    /// Image `icon_menu_faucet`.
    static let icon_menu_faucet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_faucet")
    /// Image `icon_menu_help`.
    static let icon_menu_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_help")
    /// Image `icon_menu_home`.
    static let icon_menu_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_home")
    /// Image `icon_menu_mosaic`.
    static let icon_menu_mosaic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_mosaic")
    /// Image `icon_menu_setting`.
    static let icon_menu_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_setting")
    /// Image `icon_menu`.
    static let icon_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu")
    /// Image `icon_message_encryption`.
    static let icon_message_encryption = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_message_encryption")
    /// Image `icon_message_standard`.
    static let icon_message_standard = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_message_standard")
    /// Image `icon_multisignature_green`.
    static let icon_multisignature_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_multisignature_green")
    /// Image `icon_multisignature_red`.
    static let icon_multisignature_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_multisignature_red")
    /// Image `icon_node`.
    static let icon_node = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_node")
    /// Image `icon_pin_small`.
    static let icon_pin_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pin_small")
    /// Image `icon_recycle`.
    static let icon_recycle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_recycle")
    /// Image `icon_register_84px`.
    static let icon_register_84px = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_register_84px")
    /// Image `icon_reset`.
    static let icon_reset = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reset")
    /// Image `icon_rhime`.
    static let icon_rhime = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_rhime")
    /// Image `icon_ryuta`.
    static let icon_ryuta = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_ryuta")
    /// Image `icon_scan`.
    static let icon_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_scan")
    /// Image `icon_send_end_home`.
    static let icon_send_end_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_send_end_home")
    /// Image `icon_send_end_transaction`.
    static let icon_send_end_transaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_send_end_transaction")
    /// Image `icon_transaction_check`.
    static let icon_transaction_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transaction_check")
    /// Image `icon_transaction_receive_green`.
    static let icon_transaction_receive_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transaction_receive_green")
    /// Image `icon_transaction_receive_red`.
    static let icon_transaction_receive_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transaction_receive_red")
    /// Image `icon_transaction_unconfirmed`.
    static let icon_transaction_unconfirmed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transaction_unconfirmed")
    /// Image `icon_wallet_16x16`.
    static let icon_wallet_16x16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_16x16")
    /// Image `icon_wallet_back`.
    static let icon_wallet_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_back")
    /// Image `icon_wallet`.
    static let icon_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet")
    /// Image `icon_yuki`.
    static let icon_yuki = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_yuki")
    /// Image `image_empty1_large`.
    static let image_empty1_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_empty1_large")
    /// Image `image_empty1_small`.
    static let image_empty1_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_empty1_small")
    /// Image `image_empty2_large`.
    static let image_empty2_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_empty2_large")
    /// Image `image_empty2_small`.
    static let image_empty2_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_empty2_small")
    /// Image `image_harvest_background`.
    static let image_harvest_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_harvest_background")
    /// Image `image_home_balance_background`.
    static let image_home_balance_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_home_balance_background")
    /// Image `image_key`.
    static let image_key = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_key")
    /// Image `image_lesson_card1`.
    static let image_lesson_card1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_lesson_card1")
    /// Image `image_lesson_card2`.
    static let image_lesson_card2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_lesson_card2")
    /// Image `image_lesson_card3`.
    static let image_lesson_card3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_lesson_card3")
    /// Image `image_menu_default`.
    static let image_menu_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_menu_default")
    /// Image `image_send_message_encrypted`.
    static let image_send_message_encrypted = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_send_message_encrypted")
    /// Image `image_send_message_plain`.
    static let image_send_message_plain = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_send_message_plain")
    /// Image `image_send_mode`.
    static let image_send_mode = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_send_mode")
    /// Image `image_transaction_background_bottom`.
    static let image_transaction_background_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_transaction_background_bottom")
    /// Image `image_transaction_background_top`.
    static let image_transaction_background_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_transaction_background_top")
    /// Image `image_usepin`.
    static let image_usepin = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_usepin")
    /// Image `image_walletbar`.
    static let image_walletbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_walletbar")
    /// Image `image_www_human`.
    static let image_www_human = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_www_human")
    /// Image `logo_pyoko`.
    static let logo_pyoko = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_pyoko")
    /// Image `logo_raccoon_color`.
    static let logo_raccoon_color = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_raccoon_color")
    /// Image `logo_raccoon_watermark`.
    static let logo_raccoon_watermark = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_raccoon_watermark")
    /// Image `pin_dialog_delete`.
    static let pin_dialog_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin_dialog_delete")
    /// Image `tab_home_harvest`.
    static let tab_home_harvest = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home_harvest")
    /// Image `top_icon`.
    static let top_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_icon")
    /// Image `top_logo`.
    static let top_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_logo")
    /// Image `top_logotype`.
    static let top_logotype = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_logotype")
    
    /// `UIImage(named: "about_logo", bundle: ..., traitCollection: ...)`
    static func about_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "about_open_external", bundle: ..., traitCollection: ...)`
    static func about_open_external(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about_open_external, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "account_icon_default", bundle: ..., traitCollection: ...)`
    static func account_icon_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_icon_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_nav_home", bundle: ..., traitCollection: ...)`
    static func bottom_nav_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_nav_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_nav_qr_lab", bundle: ..., traitCollection: ...)`
    static func bottom_nav_qr_lab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_nav_qr_lab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_nav_receive", bundle: ..., traitCollection: ...)`
    static func bottom_nav_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_nav_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_nav_scan", bundle: ..., traitCollection: ...)`
    static func bottom_nav_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_nav_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_nav_send", bundle: ..., traitCollection: ...)`
    static func bottom_nav_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_nav_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drawer_account_image_default", bundle: ..., traitCollection: ...)`
    static func drawer_account_image_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer_account_image_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_login_card", bundle: ..., traitCollection: ...)`
    static func heroimage_login_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_login_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_login_large", bundle: ..., traitCollection: ...)`
    static func heroimage_login_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_login_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_logo", bundle: ..., traitCollection: ...)`
    static func heroimage_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_new_card", bundle: ..., traitCollection: ...)`
    static func heroimage_new_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_new_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_new_large", bundle: ..., traitCollection: ...)`
    static func heroimage_new_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_new_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_qr_labo_small", bundle: ..., traitCollection: ...)`
    static func heroimage_qr_labo_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_qr_labo_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_seclesson_large", bundle: ..., traitCollection: ...)`
    static func heroimage_seclesson_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_seclesson_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_seclesson_small", bundle: ..., traitCollection: ...)`
    static func heroimage_seclesson_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_seclesson_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_send_large", bundle: ..., traitCollection: ...)`
    static func heroimage_send_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_send_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_send_small", bundle: ..., traitCollection: ...)`
    static func heroimage_send_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_send_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_setting_large", bundle: ..., traitCollection: ...)`
    static func heroimage_setting_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_setting_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_transaction_small", bundle: ..., traitCollection: ...)`
    static func heroimage_transaction_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_transaction_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_wallet_large", bundle: ..., traitCollection: ...)`
    static func heroimage_wallet_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_wallet_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_wallet_large2", bundle: ..., traitCollection: ...)`
    static func heroimage_wallet_large2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_wallet_large2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heroimage_wallet_small", bundle: ..., traitCollection: ...)`
    static func heroimage_wallet_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroimage_wallet_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_background", bundle: ..., traitCollection: ...)`
    static func ic_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_addressbook", bundle: ..., traitCollection: ...)`
    static func icon_addressbook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_addressbook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_back", bundle: ..., traitCollection: ...)`
    static func icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_balance", bundle: ..., traitCollection: ...)`
    static func icon_balance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_balance, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_box_next", bundle: ..., traitCollection: ...)`
    static func icon_box_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_box_next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_caution", bundle: ..., traitCollection: ...)`
    static func icon_caution(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_caution, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_check_gray", bundle: ..., traitCollection: ...)`
    static func icon_check_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_check_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_check_gray_on", bundle: ..., traitCollection: ...)`
    static func icon_check_gray_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_check_gray_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_check_green", bundle: ..., traitCollection: ...)`
    static func icon_check_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_check_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_clipboard", bundle: ..., traitCollection: ...)`
    static func icon_clipboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_clipboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close_circle", bundle: ..., traitCollection: ...)`
    static func icon_close_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dentaku", bundle: ..., traitCollection: ...)`
    static func icon_dentaku(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dentaku, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dialog_close", bundle: ..., traitCollection: ...)`
    static func icon_dialog_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dialog_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dialog_error", bundle: ..., traitCollection: ...)`
    static func icon_dialog_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dialog_error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dialog_fingerprint", bundle: ..., traitCollection: ...)`
    static func icon_dialog_fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dialog_fingerprint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dialog_success", bundle: ..., traitCollection: ...)`
    static func icon_dialog_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dialog_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_fingerprint_small", bundle: ..., traitCollection: ...)`
    static func icon_fingerprint_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_fingerprint_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_harvest_small", bundle: ..., traitCollection: ...)`
    static func icon_harvest_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_harvest_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_harvest", bundle: ..., traitCollection: ...)`
    static func icon_home_harvest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_harvest, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_home_green", bundle: ..., traitCollection: ...)`
    static func icon_home_home_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_home_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_qr_labo_green", bundle: ..., traitCollection: ...)`
    static func icon_home_qr_labo_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_qr_labo_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_receive_green", bundle: ..., traitCollection: ...)`
    static func icon_home_receive_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_receive_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_scan_gray", bundle: ..., traitCollection: ...)`
    static func icon_home_scan_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_scan_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_scan_green", bundle: ..., traitCollection: ...)`
    static func icon_home_scan_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_scan_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_send_green", bundle: ..., traitCollection: ...)`
    static func icon_home_send_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_send_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_transaction", bundle: ..., traitCollection: ...)`
    static func icon_home_transaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_transaction, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_link", bundle: ..., traitCollection: ...)`
    static func icon_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_list", bundle: ..., traitCollection: ...)`
    static func icon_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_list, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_list_next", bundle: ..., traitCollection: ...)`
    static func icon_list_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_list_next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu", bundle: ..., traitCollection: ...)`
    static func icon_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu_about", bundle: ..., traitCollection: ...)`
    static func icon_menu_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_about, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu_addressbook", bundle: ..., traitCollection: ...)`
    static func icon_menu_addressbook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_addressbook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu_donate", bundle: ..., traitCollection: ...)`
    static func icon_menu_donate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_donate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu_faucet", bundle: ..., traitCollection: ...)`
    static func icon_menu_faucet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_faucet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu_help", bundle: ..., traitCollection: ...)`
    static func icon_menu_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu_home", bundle: ..., traitCollection: ...)`
    static func icon_menu_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu_mosaic", bundle: ..., traitCollection: ...)`
    static func icon_menu_mosaic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_mosaic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_menu_setting", bundle: ..., traitCollection: ...)`
    static func icon_menu_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_message_encryption", bundle: ..., traitCollection: ...)`
    static func icon_message_encryption(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_message_encryption, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_message_standard", bundle: ..., traitCollection: ...)`
    static func icon_message_standard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_message_standard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_multisignature_green", bundle: ..., traitCollection: ...)`
    static func icon_multisignature_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_multisignature_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_multisignature_red", bundle: ..., traitCollection: ...)`
    static func icon_multisignature_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_multisignature_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_node", bundle: ..., traitCollection: ...)`
    static func icon_node(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_node, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pin_small", bundle: ..., traitCollection: ...)`
    static func icon_pin_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pin_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_recycle", bundle: ..., traitCollection: ...)`
    static func icon_recycle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_recycle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_register_84px", bundle: ..., traitCollection: ...)`
    static func icon_register_84px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_register_84px, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_reset", bundle: ..., traitCollection: ...)`
    static func icon_reset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reset, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_rhime", bundle: ..., traitCollection: ...)`
    static func icon_rhime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_rhime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_ryuta", bundle: ..., traitCollection: ...)`
    static func icon_ryuta(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_ryuta, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_scan", bundle: ..., traitCollection: ...)`
    static func icon_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_send_end_home", bundle: ..., traitCollection: ...)`
    static func icon_send_end_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_send_end_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_send_end_transaction", bundle: ..., traitCollection: ...)`
    static func icon_send_end_transaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_send_end_transaction, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transaction_check", bundle: ..., traitCollection: ...)`
    static func icon_transaction_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transaction_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transaction_receive_green", bundle: ..., traitCollection: ...)`
    static func icon_transaction_receive_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transaction_receive_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transaction_receive_red", bundle: ..., traitCollection: ...)`
    static func icon_transaction_receive_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transaction_receive_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transaction_unconfirmed", bundle: ..., traitCollection: ...)`
    static func icon_transaction_unconfirmed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transaction_unconfirmed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet", bundle: ..., traitCollection: ...)`
    static func icon_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_16x16", bundle: ..., traitCollection: ...)`
    static func icon_wallet_16x16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_16x16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_back", bundle: ..., traitCollection: ...)`
    static func icon_wallet_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_yuki", bundle: ..., traitCollection: ...)`
    static func icon_yuki(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_yuki, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_empty1_large", bundle: ..., traitCollection: ...)`
    static func image_empty1_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_empty1_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_empty1_small", bundle: ..., traitCollection: ...)`
    static func image_empty1_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_empty1_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_empty2_large", bundle: ..., traitCollection: ...)`
    static func image_empty2_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_empty2_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_empty2_small", bundle: ..., traitCollection: ...)`
    static func image_empty2_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_empty2_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_harvest_background", bundle: ..., traitCollection: ...)`
    static func image_harvest_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_harvest_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_home_balance_background", bundle: ..., traitCollection: ...)`
    static func image_home_balance_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_home_balance_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_key", bundle: ..., traitCollection: ...)`
    static func image_key(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_key, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_lesson_card1", bundle: ..., traitCollection: ...)`
    static func image_lesson_card1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_lesson_card1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_lesson_card2", bundle: ..., traitCollection: ...)`
    static func image_lesson_card2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_lesson_card2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_lesson_card3", bundle: ..., traitCollection: ...)`
    static func image_lesson_card3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_lesson_card3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_menu_default", bundle: ..., traitCollection: ...)`
    static func image_menu_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_menu_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_send_message_encrypted", bundle: ..., traitCollection: ...)`
    static func image_send_message_encrypted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_send_message_encrypted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_send_message_plain", bundle: ..., traitCollection: ...)`
    static func image_send_message_plain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_send_message_plain, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_send_mode", bundle: ..., traitCollection: ...)`
    static func image_send_mode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_send_mode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_transaction_background_bottom", bundle: ..., traitCollection: ...)`
    static func image_transaction_background_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_transaction_background_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_transaction_background_top", bundle: ..., traitCollection: ...)`
    static func image_transaction_background_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_transaction_background_top, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_usepin", bundle: ..., traitCollection: ...)`
    static func image_usepin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_usepin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_walletbar", bundle: ..., traitCollection: ...)`
    static func image_walletbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_walletbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_www_human", bundle: ..., traitCollection: ...)`
    static func image_www_human(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_www_human, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_pyoko", bundle: ..., traitCollection: ...)`
    static func logo_pyoko(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_pyoko, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_raccoon_color", bundle: ..., traitCollection: ...)`
    static func logo_raccoon_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_raccoon_color, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_raccoon_watermark", bundle: ..., traitCollection: ...)`
    static func logo_raccoon_watermark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_raccoon_watermark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pin_dialog_delete", bundle: ..., traitCollection: ...)`
    static func pin_dialog_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin_dialog_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_home_harvest", bundle: ..., traitCollection: ...)`
    static func tab_home_harvest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home_harvest, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "top_icon", bundle: ..., traitCollection: ...)`
    static func top_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "top_logo", bundle: ..., traitCollection: ...)`
    static func top_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "top_logotype", bundle: ..., traitCollection: ...)`
    static func top_logotype(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_logotype, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `BalanceCard`.
    static let balanceCard = _R.nib._BalanceCard()
    /// Nib `Calculator`.
    static let calculator = _R.nib._Calculator()
    /// Nib `HarvestView`.
    static let harvestView = _R.nib._HarvestView()
    /// Nib `PinNumberView`.
    static let pinNumberView = _R.nib._PinNumberView()
    /// Nib `SendAmountPage`.
    static let sendAmountPage = _R.nib._SendAmountPage()
    /// Nib `TransactionListHeader`.
    static let transactionListHeader = _R.nib._TransactionListHeader()
    /// Nib `TransactionView`.
    static let transactionView = _R.nib._TransactionView()
    /// Nib `WalletBar`.
    static let walletBar = _R.nib._WalletBar()
    
    /// `UINib(name: "BalanceCard", in: bundle)`
    static func balanceCard(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.balanceCard)
    }
    
    /// `UINib(name: "Calculator", in: bundle)`
    static func calculator(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calculator)
    }
    
    /// `UINib(name: "HarvestView", in: bundle)`
    static func harvestView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.harvestView)
    }
    
    /// `UINib(name: "PinNumberView", in: bundle)`
    static func pinNumberView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pinNumberView)
    }
    
    /// `UINib(name: "SendAmountPage", in: bundle)`
    static func sendAmountPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendAmountPage)
    }
    
    /// `UINib(name: "TransactionListHeader", in: bundle)`
    static func transactionListHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionListHeader)
    }
    
    /// `UINib(name: "TransactionView", in: bundle)`
    static func transactionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionView)
    }
    
    /// `UINib(name: "WalletBar", in: bundle)`
    static func walletBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletBar)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `NodeListCell`.
    static let nodeListCell: Rswift.ReuseIdentifier<NodeListCell> = Rswift.ReuseIdentifier(identifier: "NodeListCell")
    /// Reuse identifier `WalletListCell`.
    static let walletListCell: Rswift.ReuseIdentifier<WalletListCell> = Rswift.ReuseIdentifier(identifier: "WalletListCell")
    /// Reuse identifier `aboutCell`.
    static let aboutCell: Rswift.ReuseIdentifier<AboutCell> = Rswift.ReuseIdentifier(identifier: "aboutCell")
    /// Reuse identifier `balanceDetailMosaicCell`.
    static let balanceDetailMosaicCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "balanceDetailMosaicCell")
    /// Reuse identifier `mosaicGalleryMosaicCell`.
    static let mosaicGalleryMosaicCell: Rswift.ReuseIdentifier<MosaicImageCell> = Rswift.ReuseIdentifier(identifier: "mosaicGalleryMosaicCell")
    /// Reuse identifier `sendAmountMosaicCell`.
    static let sendAmountMosaicCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "sendAmountMosaicCell")
    /// Reuse identifier `settingTopDisclosureCell`.
    static let settingTopDisclosureCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "settingTopDisclosureCell")
    /// Reuse identifier `settingTopSwitchCell`.
    static let settingTopSwitchCell: Rswift.ReuseIdentifier<SettingTopSwitchCell> = Rswift.ReuseIdentifier(identifier: "settingTopSwitchCell")
    /// Reuse identifier `transactionListCell`.
    static let transactionListCell: Rswift.ReuseIdentifier<TransactionListCell> = Rswift.ReuseIdentifier(identifier: "transactionListCell")
    /// Reuse identifier `walletSettingCell`.
    static let walletSettingCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "walletSettingCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `WalletDetailViewController`, and contains static references to 1 segues.
    struct walletDetailViewController {
      /// Segue identifier `embedDetailTable`.
      static let embedDetailTable: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WalletDetailViewController, WalletDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "embedDetailTable")
      
      /// Optionally returns a typed version of segue `embedDetailTable`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embedDetailTable(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WalletDetailViewController, WalletDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.walletDetailViewController.embedDetailTable, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 55 storyboards.
  struct storyboard {
    /// Storyboard `AboutStoryboard`.
    static let aboutStoryboard = _R.storyboard.aboutStoryboard()
    /// Storyboard `BalanceDetailStoryboard`.
    static let balanceDetailStoryboard = _R.storyboard.balanceDetailStoryboard()
    /// Storyboard `DonationDetailStoryboard`.
    static let donationDetailStoryboard = _R.storyboard.donationDetailStoryboard()
    /// Storyboard `DonationTopStoryboard`.
    static let donationTopStoryboard = _R.storyboard.donationTopStoryboard()
    /// Storyboard `HomeTabStoryboard`.
    static let homeTabStoryboard = _R.storyboard.homeTabStoryboard()
    /// Storyboard `IntroductionConceptStoryboard`.
    static let introductionConceptStoryboard = _R.storyboard.introductionConceptStoryboard()
    /// Storyboard `IntroductionMessageStoryboard`.
    static let introductionMessageStoryboard = _R.storyboard.introductionMessageStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LessonBeginnerBackupEndStoryboard`.
    static let lessonBeginnerBackupEndStoryboard = _R.storyboard.lessonBeginnerBackupEndStoryboard()
    /// Storyboard `LessonBeginnerStoryboard`.
    static let lessonBeginnerStoryboard = _R.storyboard.lessonBeginnerStoryboard()
    /// Storyboard `LessonEndStoryboard`.
    static let lessonEndStoryboard = _R.storyboard.lessonEndStoryboard()
    /// Storyboard `LessonExpertStoryboard`.
    static let lessonExpertStoryboard = _R.storyboard.lessonExpertStoryboard()
    /// Storyboard `LessonImporterStoryboard`.
    static let lessonImporterStoryboard = _R.storyboard.lessonImporterStoryboard()
    /// Storyboard `LessonIntroductionStoryboard`.
    static let lessonIntroductionStoryboard = _R.storyboard.lessonIntroductionStoryboard()
    /// Storyboard `LessonLevelStoryboard`.
    static let lessonLevelStoryboard = _R.storyboard.lessonLevelStoryboard()
    /// Storyboard `LessonPinEndStoryboard`.
    static let lessonPinEndStoryboard = _R.storyboard.lessonPinEndStoryboard()
    /// Storyboard `MessageDialogStoryboard`.
    static let messageDialogStoryboard = _R.storyboard.messageDialogStoryboard()
    /// Storyboard `MosaicDetailStoryboard`.
    static let mosaicDetailStoryboard = _R.storyboard.mosaicDetailStoryboard()
    /// Storyboard `MosaicListStoryboard`.
    static let mosaicListStoryboard = _R.storyboard.mosaicListStoryboard()
    /// Storyboard `NavigationDrawerStoryboard`.
    static let navigationDrawerStoryboard = _R.storyboard.navigationDrawerStoryboard()
    /// Storyboard `NodeSelectStoryboard`.
    static let nodeSelectStoryboard = _R.storyboard.nodeSelectStoryboard()
    /// Storyboard `PinDialogStoryboard`.
    static let pinDialogStoryboard = _R.storyboard.pinDialogStoryboard()
    /// Storyboard `QrLabAmountStoryboard`.
    static let qrLabAmountStoryboard = _R.storyboard.qrLabAmountStoryboard()
    /// Storyboard `QrLabInvoiceStoryboard`.
    static let qrLabInvoiceStoryboard = _R.storyboard.qrLabInvoiceStoryboard()
    /// Storyboard `QrLabTabStoryboard`.
    static let qrLabTabStoryboard = _R.storyboard.qrLabTabStoryboard()
    /// Storyboard `QrScannerDialogStoryboard`.
    static let qrScannerDialogStoryboard = _R.storyboard.qrScannerDialogStoryboard()
    /// Storyboard `ReceiveTabStoryboard`.
    static let receiveTabStoryboard = _R.storyboard.receiveTabStoryboard()
    /// Storyboard `ScanTabStoryboard`.
    static let scanTabStoryboard = _R.storyboard.scanTabStoryboard()
    /// Storyboard `SendAmountStoryboard`.
    static let sendAmountStoryboard = _R.storyboard.sendAmountStoryboard()
    /// Storyboard `SendConfirmationStoryboard`.
    static let sendConfirmationStoryboard = _R.storyboard.sendConfirmationStoryboard()
    /// Storyboard `SendEndStoryboard`.
    static let sendEndStoryboard = _R.storyboard.sendEndStoryboard()
    /// Storyboard `SendMessageStoryboard`.
    static let sendMessageStoryboard = _R.storyboard.sendMessageStoryboard()
    /// Storyboard `SendMessageTypeStoryboard`.
    static let sendMessageTypeStoryboard = _R.storyboard.sendMessageTypeStoryboard()
    /// Storyboard `SendModeStoryboard`.
    static let sendModeStoryboard = _R.storyboard.sendModeStoryboard()
    /// Storyboard `SendTabStoryboard`.
    static let sendTabStoryboard = _R.storyboard.sendTabStoryboard()
    /// Storyboard `SettingTopStoryboard`.
    static let settingTopStoryboard = _R.storyboard.settingTopStoryboard()
    /// Storyboard `TopStoryboard`.
    static let topStoryboard = _R.storyboard.topStoryboard()
    /// Storyboard `TransactionDetailStoryboard`.
    static let transactionDetailStoryboard = _R.storyboard.transactionDetailStoryboard()
    /// Storyboard `TransactionListStoryboard`.
    static let transactionListStoryboard = _R.storyboard.transactionListStoryboard()
    /// Storyboard `WalletAddressStoryboard`.
    static let walletAddressStoryboard = _R.storyboard.walletAddressStoryboard()
    /// Storyboard `WalletBackupCautionStoryboard`.
    static let walletBackupCautionStoryboard = _R.storyboard.walletBackupCautionStoryboard()
    /// Storyboard `WalletBackupStoryboard`.
    static let walletBackupStoryboard = _R.storyboard.walletBackupStoryboard()
    /// Storyboard `WalletCreationTypeStoryboard`.
    static let walletCreationTypeStoryboard = _R.storyboard.walletCreationTypeStoryboard()
    /// Storyboard `WalletDeleteStoryboard`.
    static let walletDeleteStoryboard = _R.storyboard.walletDeleteStoryboard()
    /// Storyboard `WalletDetailStoryboard`.
    static let walletDetailStoryboard = _R.storyboard.walletDetailStoryboard()
    /// Storyboard `WalletImportEndStoryboard`.
    static let walletImportEndStoryboard = _R.storyboard.walletImportEndStoryboard()
    /// Storyboard `WalletImportKeyStoryboard`.
    static let walletImportKeyStoryboard = _R.storyboard.walletImportKeyStoryboard()
    /// Storyboard `WalletImportNameStoryboard`.
    static let walletImportNameStoryboard = _R.storyboard.walletImportNameStoryboard()
    /// Storyboard `WalletImportNanoPasswordStoryboard`.
    static let walletImportNanoPasswordStoryboard = _R.storyboard.walletImportNanoPasswordStoryboard()
    /// Storyboard `WalletNewCompletedStoryboard`.
    static let walletNewCompletedStoryboard = _R.storyboard.walletNewCompletedStoryboard()
    /// Storyboard `WalletNewEndStoryboard`.
    static let walletNewEndStoryboard = _R.storyboard.walletNewEndStoryboard()
    /// Storyboard `WalletNewNameStoryboard`.
    static let walletNewNameStoryboard = _R.storyboard.walletNewNameStoryboard()
    /// Storyboard `WalletRenameStoryboard`.
    static let walletRenameStoryboard = _R.storyboard.walletRenameStoryboard()
    /// Storyboard `WalletSelectStoryboard`.
    static let walletSelectStoryboard = _R.storyboard.walletSelectStoryboard()
    /// Storyboard `WalletSettingStoryboard`.
    static let walletSettingStoryboard = _R.storyboard.walletSettingStoryboard()
    
    /// `UIStoryboard(name: "AboutStoryboard", bundle: ...)`
    static func aboutStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.aboutStoryboard)
    }
    
    /// `UIStoryboard(name: "BalanceDetailStoryboard", bundle: ...)`
    static func balanceDetailStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.balanceDetailStoryboard)
    }
    
    /// `UIStoryboard(name: "DonationDetailStoryboard", bundle: ...)`
    static func donationDetailStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.donationDetailStoryboard)
    }
    
    /// `UIStoryboard(name: "DonationTopStoryboard", bundle: ...)`
    static func donationTopStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.donationTopStoryboard)
    }
    
    /// `UIStoryboard(name: "HomeTabStoryboard", bundle: ...)`
    static func homeTabStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeTabStoryboard)
    }
    
    /// `UIStoryboard(name: "IntroductionConceptStoryboard", bundle: ...)`
    static func introductionConceptStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.introductionConceptStoryboard)
    }
    
    /// `UIStoryboard(name: "IntroductionMessageStoryboard", bundle: ...)`
    static func introductionMessageStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.introductionMessageStoryboard)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LessonBeginnerBackupEndStoryboard", bundle: ...)`
    static func lessonBeginnerBackupEndStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonBeginnerBackupEndStoryboard)
    }
    
    /// `UIStoryboard(name: "LessonBeginnerStoryboard", bundle: ...)`
    static func lessonBeginnerStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonBeginnerStoryboard)
    }
    
    /// `UIStoryboard(name: "LessonEndStoryboard", bundle: ...)`
    static func lessonEndStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonEndStoryboard)
    }
    
    /// `UIStoryboard(name: "LessonExpertStoryboard", bundle: ...)`
    static func lessonExpertStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonExpertStoryboard)
    }
    
    /// `UIStoryboard(name: "LessonImporterStoryboard", bundle: ...)`
    static func lessonImporterStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonImporterStoryboard)
    }
    
    /// `UIStoryboard(name: "LessonIntroductionStoryboard", bundle: ...)`
    static func lessonIntroductionStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonIntroductionStoryboard)
    }
    
    /// `UIStoryboard(name: "LessonLevelStoryboard", bundle: ...)`
    static func lessonLevelStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonLevelStoryboard)
    }
    
    /// `UIStoryboard(name: "LessonPinEndStoryboard", bundle: ...)`
    static func lessonPinEndStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonPinEndStoryboard)
    }
    
    /// `UIStoryboard(name: "MessageDialogStoryboard", bundle: ...)`
    static func messageDialogStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messageDialogStoryboard)
    }
    
    /// `UIStoryboard(name: "MosaicDetailStoryboard", bundle: ...)`
    static func mosaicDetailStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mosaicDetailStoryboard)
    }
    
    /// `UIStoryboard(name: "MosaicListStoryboard", bundle: ...)`
    static func mosaicListStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mosaicListStoryboard)
    }
    
    /// `UIStoryboard(name: "NavigationDrawerStoryboard", bundle: ...)`
    static func navigationDrawerStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.navigationDrawerStoryboard)
    }
    
    /// `UIStoryboard(name: "NodeSelectStoryboard", bundle: ...)`
    static func nodeSelectStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.nodeSelectStoryboard)
    }
    
    /// `UIStoryboard(name: "PinDialogStoryboard", bundle: ...)`
    static func pinDialogStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pinDialogStoryboard)
    }
    
    /// `UIStoryboard(name: "QrLabAmountStoryboard", bundle: ...)`
    static func qrLabAmountStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qrLabAmountStoryboard)
    }
    
    /// `UIStoryboard(name: "QrLabInvoiceStoryboard", bundle: ...)`
    static func qrLabInvoiceStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qrLabInvoiceStoryboard)
    }
    
    /// `UIStoryboard(name: "QrLabTabStoryboard", bundle: ...)`
    static func qrLabTabStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qrLabTabStoryboard)
    }
    
    /// `UIStoryboard(name: "QrScannerDialogStoryboard", bundle: ...)`
    static func qrScannerDialogStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qrScannerDialogStoryboard)
    }
    
    /// `UIStoryboard(name: "ReceiveTabStoryboard", bundle: ...)`
    static func receiveTabStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.receiveTabStoryboard)
    }
    
    /// `UIStoryboard(name: "ScanTabStoryboard", bundle: ...)`
    static func scanTabStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.scanTabStoryboard)
    }
    
    /// `UIStoryboard(name: "SendAmountStoryboard", bundle: ...)`
    static func sendAmountStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendAmountStoryboard)
    }
    
    /// `UIStoryboard(name: "SendConfirmationStoryboard", bundle: ...)`
    static func sendConfirmationStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendConfirmationStoryboard)
    }
    
    /// `UIStoryboard(name: "SendEndStoryboard", bundle: ...)`
    static func sendEndStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendEndStoryboard)
    }
    
    /// `UIStoryboard(name: "SendMessageStoryboard", bundle: ...)`
    static func sendMessageStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendMessageStoryboard)
    }
    
    /// `UIStoryboard(name: "SendMessageTypeStoryboard", bundle: ...)`
    static func sendMessageTypeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendMessageTypeStoryboard)
    }
    
    /// `UIStoryboard(name: "SendModeStoryboard", bundle: ...)`
    static func sendModeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendModeStoryboard)
    }
    
    /// `UIStoryboard(name: "SendTabStoryboard", bundle: ...)`
    static func sendTabStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendTabStoryboard)
    }
    
    /// `UIStoryboard(name: "SettingTopStoryboard", bundle: ...)`
    static func settingTopStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingTopStoryboard)
    }
    
    /// `UIStoryboard(name: "TopStoryboard", bundle: ...)`
    static func topStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.topStoryboard)
    }
    
    /// `UIStoryboard(name: "TransactionDetailStoryboard", bundle: ...)`
    static func transactionDetailStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactionDetailStoryboard)
    }
    
    /// `UIStoryboard(name: "TransactionListStoryboard", bundle: ...)`
    static func transactionListStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactionListStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletAddressStoryboard", bundle: ...)`
    static func walletAddressStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletAddressStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletBackupCautionStoryboard", bundle: ...)`
    static func walletBackupCautionStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletBackupCautionStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletBackupStoryboard", bundle: ...)`
    static func walletBackupStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletBackupStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletCreationTypeStoryboard", bundle: ...)`
    static func walletCreationTypeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletCreationTypeStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletDeleteStoryboard", bundle: ...)`
    static func walletDeleteStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletDeleteStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletDetailStoryboard", bundle: ...)`
    static func walletDetailStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletDetailStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletImportEndStoryboard", bundle: ...)`
    static func walletImportEndStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletImportEndStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletImportKeyStoryboard", bundle: ...)`
    static func walletImportKeyStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletImportKeyStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletImportNameStoryboard", bundle: ...)`
    static func walletImportNameStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletImportNameStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletImportNanoPasswordStoryboard", bundle: ...)`
    static func walletImportNanoPasswordStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletImportNanoPasswordStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletNewCompletedStoryboard", bundle: ...)`
    static func walletNewCompletedStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletNewCompletedStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletNewEndStoryboard", bundle: ...)`
    static func walletNewEndStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletNewEndStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletNewNameStoryboard", bundle: ...)`
    static func walletNewNameStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletNewNameStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletRenameStoryboard", bundle: ...)`
    static func walletRenameStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletRenameStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletSelectStoryboard", bundle: ...)`
    static func walletSelectStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletSelectStoryboard)
    }
    
    /// `UIStoryboard(name: "WalletSettingStoryboard", bundle: ...)`
    static func walletSettingStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletSettingStoryboard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 218 localization keys.
    struct localizable {
      /// en translation: 
      /// 
      /// Locales: en, ja
      static let lesson_pin_end_message = Rswift.StringResource(key: "lesson_pin_end_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 
      /// 
      /// Locales: en, ja
      static let lesson_pin_end_set_ok = Rswift.StringResource(key: "lesson_pin_end_set_ok", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 
      /// 
      /// Locales: en, ja
      static let lesson_pin_end_title = Rswift.StringResource(key: "lesson_pin_end_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: %@で送金します
      /// 
      /// Locales: en, ja
      static let send_confirmation_biometrics = Rswift.StringResource(key: "send_confirmation_biometrics", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: %@によるアクセス設定
      /// 
      /// Locales: en, ja
      static let common_biometrics_enable_title = Rswift.StringResource(key: "common_biometrics_enable_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: %@の要求
      /// 
      /// Locales: en, ja
      static let setting_require_biometrics = Rswift.StringResource(key: "setting_require_biometrics", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: %@を使用したログインが設定されました。
      /// 
      /// Locales: en, ja
      static let common_biometrics_enable_success_message = Rswift.StringResource(key: "common_biometrics_enable_success_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: %@を使用してアプリのロックを解除できるように設定できます。 OKを押すと、設定を完了します。
      /// 
      /// Locales: en, ja
      static let common_biometrics_enable_message = Rswift.StringResource(key: "common_biometrics_enable_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 1024文字以内。取引所への認証番号にも使うよ。
      /// 
      /// Locales: en
      static let send_message_hint = Rswift.StringResource(key: "send_message_hint", tableName: "localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: About This APP
      /// 
      /// Locales: en, ja
      static let about_title = Rswift.StringResource(key: "about_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Android Developper
      /// 
      /// Locales: en, ja
      static let donation_android_engineer_name = Rswift.StringResource(key: "donation_android_engineer_name", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: God of Raccoon。創造主でエンジニア。 すべてはココからはじまった。彼らがいなかったらラクーンは存在していない。 RaccoonのAndroidエンジニアは二人。@YukiYamadaJPと@Riberd_Puzzle1だ。  ・リードエンジニア / コア開発者 ・ベースアプリ（NEM総合アプリ） 開発 ・Android版アプリ開発
      /// 
      /// Locales: en, ja
      static let donation_android_engineer_detail = Rswift.StringResource(key: "donation_android_engineer_detail", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Message SEND
      /// 
      /// Locales: en
      static let send_message_title = Rswift.StringResource(key: "send_message_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: NEM/XEM の送金が完了しました
      /// 
      /// Locales: en, ja
      static let send_complete_message = Rswift.StringResource(key: "send_complete_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: NEMユーザーのあなた！ ラクーンウォレットを選んでくれて嬉しいよ。すでによく知っている君には、僕から説明することはあまりないかな。 ここの画面から、PINコードを設定できるから、サクッと設定しといてくれ。  もし秘密鍵のバックアップを取り忘れてたなら、初心者のカードからレッスンを受けてね。
      /// 
      /// Locales: en, ja
      static let lesson_importer_message = Rswift.StringResource(key: "lesson_importer_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: NEM初心者です！
      /// 
      /// Locales: en, ja
      static let lesson_level_beginner_title = Rswift.StringResource(key: "lesson_level_beginner_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: NEM初心者の君へ捧ぐメッセージ！ 知っている人もいるかもしれないけど、秘密鍵というのは仮想通貨にとって、すごく大事なものなんだ。NEMの場合もそれは同じだよ。バックアップはしっかりね。  それからアプリ本体のPINコード。 スマホをもし落としてしまったりしたとき、アプリにロックをかけておかないと、勝手に送金されてしまうかもしれないよ。 どっちも大事だ。これから対策していくよ。 準備はいいかい？ それじゃあ、やっていこう。
      /// 
      /// Locales: en, ja
      static let lesson_beginner_message = Rswift.StringResource(key: "lesson_beginner_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: NanoWalletで生成したQRコードからNEMアカウントをリンクしようとしています。 この操作には、NanoWalletのパスワードの入力が必要です。
      /// 
      /// Locales: en, ja
      static let wallet_import_nano_password_message = Rswift.StringResource(key: "wallet_import_nano_password_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: NanoWalletのパスワードを入力
      /// 
      /// Locales: en, ja
      static let wallet_import_nano_password_headline = Rswift.StringResource(key: "wallet_import_nano_password_headline", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PIN Code が一致しません。 もう一度
      /// 
      /// Locales: en, ja
      static let common_pin_retry = Rswift.StringResource(key: "common_pin_retry", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PINが設定されていないため、送信画面に移動できません。 送金操作を行うには、設定からPINの設定を行ってください。
      /// 
      /// Locales: en, ja
      static let common_error_go_send_pin_message = Rswift.StringResource(key: "common_error_go_send_pin_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PINの設定がまだのようですね。先にPINの設定をしてください。
      /// 
      /// Locales: en, ja
      static let setting_pin_not_available_message = Rswift.StringResource(key: "setting_pin_not_available_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PINを入力して送金を確定する
      /// 
      /// Locales: en, ja
      static let send_confirmation_pin_message = Rswift.StringResource(key: "send_confirmation_pin_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PINコードが未設定です。先にPINコードの設定を行ってください。
      /// 
      /// Locales: en, ja
      static let common_error_pin_not_set = Rswift.StringResource(key: "common_error_pin_not_set", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PINコードの設定
      /// 
      /// Locales: en, ja
      static let common_pin_settings = Rswift.StringResource(key: "common_pin_settings", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PINコードの設定・変更
      /// 
      /// Locales: en, ja
      static let setting_change_password = Rswift.StringResource(key: "setting_change_password", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PINコード設定
      /// 
      /// Locales: en, ja
      static let lesson_level_importer_setup = Rswift.StringResource(key: "lesson_level_importer_setup", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: PIN設定画面に移動する
      /// 
      /// Locales: en, ja
      static let common_error_go_send_pin_button = Rswift.StringResource(key: "common_error_go_send_pin_button", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: QRコードのインポート
      /// 
      /// Locales: en, ja
      static let common_qr_import = Rswift.StringResource(key: "common_qr_import", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: QRレジスター
      /// 
      /// Locales: en, ja
      static let qrlab_register_headline = Rswift.StringResource(key: "qrlab_register_headline", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: RaccoonWallet
      /// 
      /// Locales: en, ja
      static let common_app_title = Rswift.StringResource(key: "common_app_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Raccoonの名付け親。デザイナー。 このアプリふざけてんなぁと思ったら、この人のせい。 ラクーンにおけるデザインの大体は、この人が作った。 使いやすいアプリの構造を考えたりする情報アーキテクチャも兼任した。  ・総合コンテンツデザイナー ・Android / iOSアプリのIA/UI/UXデザイン ・ビジュアルデザイン/ブランディング（ロゴ・サイト）
      /// 
      /// Locales: en, ja
      static let donation_designer_detail = Rswift.StringResource(key: "donation_designer_detail", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Raccoonの命綱。iOSエンジニア。最強の後衛。 将棋で例えるなら飛車。 ラクーンを林檎の楽園へといざなう。  ・Android→iOS版アプリ移植・開発主任 ・nem-kotlinの創造主。
      /// 
      /// Locales: en, ja
      static let donation_ios_engineer_detail = Rswift.StringResource(key: "donation_ios_engineer_detail", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Rhime
      /// 
      /// Locales: en, ja
      static let donation_designer_name = Rswift.StringResource(key: "donation_designer_name", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Ryuta
      /// 
      /// Locales: en, ja
      static let donation_ios_engineer_name = Rswift.StringResource(key: "donation_ios_engineer_name", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: STANDARD SEND
      /// 
      /// Locales: en
      static let send_standard_title = Rswift.StringResource(key: "send_standard_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SUCCESS
      /// 
      /// Locales: en, ja
      static let common_success = Rswift.StringResource(key: "common_success", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: SUCCESS！
      /// 
      /// Locales: en, ja
      static let common_biometrics_enable_success_title = Rswift.StringResource(key: "common_biometrics_enable_success_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: UIデザイナー
      /// 
      /// Locales: en, ja
      static let donation_designer_role = Rswift.StringResource(key: "donation_designer_role", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Walletの名前をインポート
      /// 
      /// Locales: en, ja
      static let wallet_login_name_title = Rswift.StringResource(key: "wallet_login_name_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Welcome to Raccoon Wallet
      /// 
      /// Locales: en, ja
      static let create_wallet_tutorial_title = Rswift.StringResource(key: "create_wallet_tutorial_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: XEMを一緒に送る
      /// 
      /// Locales: en, ja
      static let send_amount_with_xem = Rswift.StringResource(key: "send_amount_with_xem", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: iOSエンジニア
      /// 
      /// Locales: en, ja
      static let donation_ios_engineer_role = Rswift.StringResource(key: "donation_ios_engineer_role", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: …上に出てきたナンバーは何かって？ ウォレットのメンテンスしたいときは押すが良い。 この画面では動作しないからあとで試してみてくれ。
      /// 
      /// Locales: en, ja
      static let wallet_create_message_1 = Rswift.StringResource(key: "wallet_create_message_1", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 　おっと！
      /// 
      /// Locales: en, ja
      static let lesson_cancel_pin_title = Rswift.StringResource(key: "lesson_cancel_pin_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: あっ、なんだ君か。 そうそう、聞いてよ。最近、人にものを教えるのって大変だなって痛感してるんだ。なんでも３倍理解してないとダメだとか。僕の苦労も報われるといいのだけど。 そう思わない？ え？秘密鍵のバックアップ？次の画面だよ。 そうそう、それでさ～。
      /// 
      /// Locales: en, ja
      static let lesson_expert_message = Rswift.StringResource(key: "lesson_expert_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: いいセンスだ。 以上でリンク作業は完了しました。ウォレットの変更や追加をしたい場合は、 ウォレットバーのボタンから管理画面に アクセスしてみてくださいね。 もし時間があるなら、この後のセキュリティレッスンの受講をオススメします。PINコードの設定やウォレットのバックアップを行うぞ。
      /// 
      /// Locales: en, ja
      static let wallet_login_end_message = Rswift.StringResource(key: "wallet_login_end_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: いつもラクーンウォレットを使ってくれてありがとう。  てなわけで、セキュリティレッスンは以上で終わり。 ウォレットにもそろそろ慣れてきたんじゃないかい？ とはいえ事前の対策を疎かにはしないでね。  曾子曰く、人生とは、 死而後巳（死してのち巳む）。 くたばって初めて油断できるのさ。 また会おうぜ。グッドラック。
      /// 
      /// Locales: en, ja
      static let lesson_expert_end_message = Rswift.StringResource(key: "lesson_expert_end_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: おっと!
      /// 
      /// Locales: en, ja
      static let setting_pin_not_available_title = Rswift.StringResource(key: "setting_pin_not_available_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: おっと。まだ取引はないみたい。
      /// 
      /// Locales: en, ja
      static let transaction_no_transaction_title = Rswift.StringResource(key: "transaction_no_transaction_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: おっと！
      /// 
      /// Locales: en, ja
      static let lesson_pin_end_not_available_title = Rswift.StringResource(key: "lesson_pin_end_not_available_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: おっと！
      /// 
      /// Locales: en, ja
      static let wallet_go_home_caution1_title = Rswift.StringResource(key: "wallet_go_home_caution1_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: おや?寄付してくれるのかい!?
      /// 
      /// Locales: en, ja
      static let donation_title = Rswift.StringResource(key: "donation_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: お会いできて光栄です。 ブロックチェーンを使った新しい経済活動を 一緒にはじめましょう
      /// 
      /// Locales: en, ja
      static let first_tutorial_message1 = Rswift.StringResource(key: "first_tutorial_message1", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: お疲れ様！
      /// 
      /// Locales: en, ja
      static let lesson_end_title = Rswift.StringResource(key: "lesson_end_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: お疲れ様！レッスンはどう？
      /// 
      /// Locales: en, ja
      static let wallet_end_title = Rswift.StringResource(key: "wallet_end_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: お見せできるモザイクは、これっぽっちもないよ。 涙がちょちょ切れるほどコレクションに励もう。
      /// 
      /// Locales: en, ja
      static let gallery_no_mosaic_message = Rswift.StringResource(key: "gallery_no_mosaic_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: このPINコードを忘れた場合、アプリの操作ができなくなります。忘れないようにしてください。ただしPINコードを忘れた場合でもウォレットのXEMが無くなるわけではありません。 アドレスごとの秘密鍵を紛失した場合のみ資産にアクセスできなくなります。
      /// 
      /// Locales: en, ja
      static let common_pin_registration_message_1 = Rswift.StringResource(key: "common_pin_registration_message_1", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: この画面で指紋認証またはPINの認証が完了すると、送金が完了します。 表示された情報をよくご確認の上、操作してください。
      /// 
      /// Locales: en, ja
      static let send_confirmation_dialog_message = Rswift.StringResource(key: "send_confirmation_dialog_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: すばらしい！ウォレット作成完了です。 あっという間。驚いた？ とりあえず君のアドレスはこんな感じ。
      /// 
      /// Locales: en, ja
      static let wallet_create_message_0 = Rswift.StringResource(key: "wallet_create_message_0", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: すばらしい！！ これで君も立派なクリプトコイナーというわけだ。 感慨深いね。  てなわけで、セキュリティレッスンは以上で終わり。 暇があったらメニューからヘルプも覗くと良いよ。 まあ後は使いながら覚えていってくれ。 月に叢雲花に風。 さよならだけが人生さ。 また会おうぜ。グッドラック。
      /// 
      /// Locales: en, ja
      static let lesson_beginner_end_message = Rswift.StringResource(key: "lesson_beginner_end_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: すべてが暗号通貨ベースで設計され、 すべてが新しい考え方で動く、 ニューエコノミープラットフォーム。 魅力的な体験は、ここからはじまります。
      /// 
      /// Locales: en, ja
      static let first_tutorial_message2 = Rswift.StringResource(key: "first_tutorial_message2", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: すべての人に経済を。
      /// 
      /// Locales: en, ja
      static let first_tutorial_title3 = Rswift.StringResource(key: "first_tutorial_title3", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: はじめまして
      /// 
      /// Locales: en, ja
      static let first_tutorial_title1 = Rswift.StringResource(key: "first_tutorial_title1", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: はじめる
      /// 
      /// Locales: en, ja
      static let first_tutorial_button = Rswift.StringResource(key: "first_tutorial_button", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ほんとにHOMEに行くのかい？ セキュリティはちゃんとしといたほうがいいよ。
      /// 
      /// Locales: en, ja
      static let wallet_go_home_caution1_message = Rswift.StringResource(key: "wallet_go_home_caution1_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ほんとにほんとだね？止めはしないよ。 もしウォレットのバックアップやPINコードを設定したくなったら、ウォレットバーやメニューのアプリ設定からいつでも行えるよ。それにレッスンもアプリ設定のセキュリティの項目から受講できるからね。
      /// 
      /// Locales: en, ja
      static let wallet_go_home_caution2_message = Rswift.StringResource(key: "wallet_go_home_caution2_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ほんとに？
      /// 
      /// Locales: en, ja
      static let wallet_go_home_caution2_title = Rswift.StringResource(key: "wallet_go_home_caution2_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: まだハーベストの履歴はありません。
      /// 
      /// Locales: en, ja
      static let home_harvest_empty_message = Rswift.StringResource(key: "home_harvest_empty_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: まだ送受信の履歴はありません。
      /// 
      /// Locales: en, ja
      static let home_transaction_empty_message = Rswift.StringResource(key: "home_transaction_empty_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: また会ったな。 ウォレットのバックアップはできたかい？ さあ次は、アプリのPINコード設定だ。  グッドラック！
      /// 
      /// Locales: en, ja
      static let lesson_beginner_backup_end_message = Rswift.StringResource(key: "lesson_beginner_backup_end_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: もうPINは設定してあるみたいだね。 OKを押してレッスンを終えてもらっていいよ。 お疲れ様！
      /// 
      /// Locales: en, ja
      static let lesson_cancel_pin_message = Rswift.StringResource(key: "lesson_cancel_pin_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: やあ。セキュリティレッスンを受けに来たのかい？ 感心感心 よーし、それじゃあ早速やっていこう。  じゃあ、まず最初に君のことを教えてくれないかい？ 次の画面で自分に合うものを選択してくれ。 特別にみんなに最適なレッスン用意したからさ。
      /// 
      /// Locales: en, ja
      static let lesson_introduction_message = Rswift.StringResource(key: "lesson_introduction_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ようこそNEMの世界へ。
      /// 
      /// Locales: en, ja
      static let lesson_level_beginner_message = Rswift.StringResource(key: "lesson_level_beginner_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ようこそ、お客人
      /// 
      /// Locales: en, ja
      static let wallet_name_title = Rswift.StringResource(key: "wallet_name_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: アカウント情報の復元に失敗しました。
      /// 
      /// Locales: en, ja
      static let common_error_account_repair = Rswift.StringResource(key: "common_error_account_repair", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: アドレス
      /// 
      /// Locales: en, ja
      static let common_address = Rswift.StringResource(key: "common_address", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: アドレス帳
      /// 
      /// Locales: en, ja
      static let common_address_book = Rswift.StringResource(key: "common_address_book", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: アプリの利用を開始する前に、ご確認ください。
      /// 
      /// Locales: en, ja
      static let common_privacy_policy_caution = Rswift.StringResource(key: "common_privacy_policy_caution", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: アプリ本体を保護するための6桁のPINコードが設定されました。
      /// 
      /// Locales: en, ja
      static let common_pin_registration_complete = Rswift.StringResource(key: "common_pin_registration_complete", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: アプリ本体を保護するためのPINコードを設定します。6桁のPINコードを入力してください。 確認のため二度入力します。 ※数字の繰り返しや誕生日などを含むコードはセキュリティの観点からおすすめしません。 
      /// 
      /// Locales: en, ja
      static let common_pin_registration_message_0 = Rswift.StringResource(key: "common_pin_registration_message_0", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットがないみたい。
      /// 
      /// Locales: en, ja
      static let wallet_no_wallet_title = Rswift.StringResource(key: "wallet_no_wallet_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットが選択されていないため、送信画面に移動できません。 送金操作を行うには、ウォレットを選択してください。
      /// 
      /// Locales: en, ja
      static let common_error_go_send_no_wallet_message = Rswift.StringResource(key: "common_error_go_send_no_wallet_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットが選択されていません
      /// 
      /// Locales: en, ja
      static let wallet_not_select_message = Rswift.StringResource(key: "wallet_not_select_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットのアドレス
      /// 
      /// Locales: en, ja
      static let wallet_settings_address = Rswift.StringResource(key: "wallet_settings_address", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットのバックアップ
      /// 
      /// Locales: en, ja
      static let lesson_level_expert_setup = Rswift.StringResource(key: "lesson_level_expert_setup", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットのバックアップ
      /// 
      /// Locales: en, ja
      static let wallet_settings_backup = Rswift.StringResource(key: "wallet_settings_backup", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットの名前を変更する
      /// 
      /// Locales: en, ja
      static let wallet_settings_rename = Rswift.StringResource(key: "wallet_settings_rename", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットの設定
      /// 
      /// Locales: en, ja
      static let wallet_settings_title = Rswift.StringResource(key: "wallet_settings_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットの詳細
      /// 
      /// Locales: en, ja
      static let wallet_detail_title = Rswift.StringResource(key: "wallet_detail_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットの詳細
      /// 
      /// Locales: en, ja
      static let wallet_settings_detail = Rswift.StringResource(key: "wallet_settings_detail", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットを削除
      /// 
      /// Locales: en, ja
      static let wallet_settings_delete = Rswift.StringResource(key: "wallet_settings_delete", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットを削除します。 秘密鍵がないと復元できなくなります。 本当にウォレットを削除しますか？
      /// 
      /// Locales: en, ja
      static let wallet_delete_caution_message = Rswift.StringResource(key: "wallet_delete_caution_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレットを選択
      /// 
      /// Locales: en, ja
      static let wallet_select = Rswift.StringResource(key: "wallet_select", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレット名変更
      /// 
      /// Locales: en, ja
      static let wallet_rename_title = Rswift.StringResource(key: "wallet_rename_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレット構成 (m-of-n)
      /// 
      /// Locales: en, ja
      static let wallet_detail_structure = Rswift.StringResource(key: "wallet_detail_structure", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレット残高
      /// 
      /// Locales: en, ja
      static let common_wallet_balance = Rswift.StringResource(key: "common_wallet_balance", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ウォレット選択画面に移動する
      /// 
      /// Locales: en, ja
      static let common_error_go_send_no_wallet_button = Rswift.StringResource(key: "common_error_go_send_no_wallet_button", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: エンジニア
      /// 
      /// Locales: en, ja
      static let donation_android_engineer_role = Rswift.StringResource(key: "donation_android_engineer_role", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: オープンソースライセンス
      /// 
      /// Locales: en, ja
      static let about_open_source = Rswift.StringResource(key: "about_open_source", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: カミングスーン
      /// 
      /// Locales: en, ja
      static let common_coming_soon = Rswift.StringResource(key: "common_coming_soon", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: グレイト！ アカウントのリンクが正常に行われました。 ウォレットに名前をつけると便利です。
      /// 
      /// Locales: en, ja
      static let wallet_login_name_message = Rswift.StringResource(key: "wallet_login_name_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: クリップボードにコピーしました
      /// 
      /// Locales: en, ja
      static let common_copy_to_clipboard = Rswift.StringResource(key: "common_copy_to_clipboard", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: スクリーンショットに撮るのは危険です。
      /// 
      /// Locales: en, ja
      static let wallet_key_backup_title = Rswift.StringResource(key: "wallet_key_backup_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: セキュリティ
      /// 
      /// Locales: en, ja
      static let common_security = Rswift.StringResource(key: "common_security", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: セキュリティレッスン
      /// 
      /// Locales: en, ja
      static let common_security_lesson = Rswift.StringResource(key: "common_security_lesson", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: セキュリティレッスンを受ける
      /// 
      /// Locales: en, ja
      static let setting_go_to_security_lesson = Rswift.StringResource(key: "setting_go_to_security_lesson", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: セレクトユアレベル！
      /// 
      /// Locales: en, ja
      static let lesson_level_title = Rswift.StringResource(key: "lesson_level_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: タップして認証画面を表示
      /// 
      /// Locales: en, ja
      static let send_confirmation_button = Rswift.StringResource(key: "send_confirmation_button", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: トランザクションが発生したら ここに一覧で表示されるよ。
      /// 
      /// Locales: en, ja
      static let transaction_no_transaction_message = Rswift.StringResource(key: "transaction_no_transaction_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: トランザクションにメッセージを添えます
      /// 
      /// Locales: en
      static let send_message_message = Rswift.StringResource(key: "send_message_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: トランザクション一覧
      /// 
      /// Locales: en, ja
      static let transaction_list_title = Rswift.StringResource(key: "transaction_list_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: トランザクション詳細
      /// 
      /// Locales: en, ja
      static let transaction_detail_title = Rswift.StringResource(key: "transaction_detail_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ニュービーな君へ
      /// 
      /// Locales: en, ja
      static let lesson_beginner_title = Rswift.StringResource(key: "lesson_beginner_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ノード選択
      /// 
      /// Locales: en, ja
      static let setting_node_select = Rswift.StringResource(key: "setting_node_select", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: バックアップ
      /// 
      /// Locales: en, ja
      static let common_backup = Rswift.StringResource(key: "common_backup", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: パスワードが一致しません
      /// 
      /// Locales: en, ja
      static let common_invalid_password = Rswift.StringResource(key: "common_invalid_password", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: パスワードを入れてね
      /// 
      /// Locales: en, ja
      static let wallet_import_nano_password_hint = Rswift.StringResource(key: "wallet_import_nano_password_hint", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: パスワード入力
      /// 
      /// Locales: en, ja
      static let wallet_import_nano_password_title = Rswift.StringResource(key: "wallet_import_nano_password_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ハロー。ウェルカム・トゥ・ラクーン。 早速、君のウォレットを作っていこう。 まず最初に、ウォレットにイケてる名前をつけてくれ。
      /// 
      /// Locales: en, ja
      static let wallet_name_message = Rswift.StringResource(key: "wallet_name_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ハーベスト
      /// 
      /// Locales: en, ja
      static let common_harvest = Rswift.StringResource(key: "common_harvest", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: プライベートキー(秘密鍵)について
      /// 
      /// Locales: en, ja
      static let wallet_key_caution_title = Rswift.StringResource(key: "wallet_key_caution_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: プライベートキー（秘密鍵）はあなたのアカウント情報において最も重要であり、機密事項として注意して取り扱わなければなりません。  プライベートキーは、関連する資金と資産を制御し、あなたのアカウントを元に戻すために必要なものであり、この知識は誰もが身につける必要があります。  このプライベートキーは、決してなくさないようにしてください。 また絶対に外部に漏れないように注意して扱ってください。
      /// 
      /// Locales: en, ja
      static let wallet_key_caution_message = Rswift.StringResource(key: "wallet_key_caution_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: メッセージ
      /// 
      /// Locales: en, ja
      static let common_message = Rswift.StringResource(key: "common_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: メッセージの復元に失敗しました
      /// 
      /// Locales: en, ja
      static let common_error_decode_message = Rswift.StringResource(key: "common_error_decode_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: メッセージは暗号化されています
      /// 
      /// Locales: en, ja
      static let transaction_message_is_encrypted = Rswift.StringResource(key: "transaction_message_is_encrypted", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: メッセージは添付せずに送金します。
      /// 
      /// Locales: en
      static let send_standard_hint = Rswift.StringResource(key: "send_standard_hint", tableName: "localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: メッセージを入力
      /// 
      /// Locales: en, ja
      static let common_message_input = Rswift.StringResource(key: "common_message_input", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: メッセージを添付しますか？
      /// 
      /// Locales: en, ja
      static let send_mode_select_message = Rswift.StringResource(key: "send_mode_select_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: メッセージタイプの暗号化設定
      /// 
      /// Locales: en, ja
      static let send_message_type_select_title = Rswift.StringResource(key: "send_message_type_select_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: モザイクなど存在しない。
      /// 
      /// Locales: en, ja
      static let gallery_no_mosaic_title = Rswift.StringResource(key: "gallery_no_mosaic_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: モザイクギャラリー
      /// 
      /// Locales: en, ja
      static let common_mosaic_gallery = Rswift.StringResource(key: "common_mosaic_gallery", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: モザイク一覧
      /// 
      /// Locales: en, ja
      static let common_mosaic_list = Rswift.StringResource(key: "common_mosaic_list", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: モザイク添付
      /// 
      /// Locales: en, ja
      static let send_mosaic_setting = Rswift.StringResource(key: "send_mosaic_setting", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ラクーンを選んでくれてありがとう〜
      /// 
      /// Locales: en, ja
      static let lesson_level_importer_message = Rswift.StringResource(key: "lesson_level_importer_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ラクーンユーザーです
      /// 
      /// Locales: en, ja
      static let lesson_level_expert_title = Rswift.StringResource(key: "lesson_level_expert_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: リンク完了
      /// 
      /// Locales: en, ja
      static let wallet_login_end_title = Rswift.StringResource(key: "wallet_login_end_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: レッスンお疲れ様。仮想通貨の活動をラクーンで行うことを選択した君を後悔させないように頑張るよ。 このウォレット自体の使い方は、メニューからアクセスできるヘルプから学習してほしい。  ゆく河の流れは絶えずして、しかももとの水にあらず。 いづかたより来たりて、いづかたへか去る君との出会いに感謝するよ。 グッドラック。
      /// 
      /// Locales: en, ja
      static let lesson_importer_end_message = Rswift.StringResource(key: "lesson_importer_end_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: レッスンを終える
      /// 
      /// Locales: en, ja
      static let lesson_pin_end_home = Rswift.StringResource(key: "lesson_pin_end_home", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: レビューを書く
      /// 
      /// Locales: en, ja
      static let about_review = Rswift.StringResource(key: "about_review", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 一番いいウォレットネームを
      /// 
      /// Locales: en, ja
      static let wallet_name_input = Rswift.StringResource(key: "wallet_name_input", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 一般
      /// 
      /// Locales: en, ja
      static let common_general = Rswift.StringResource(key: "common_general", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 一般情報
      /// 
      /// Locales: en, ja
      static let wallet_detail_general = Rswift.StringResource(key: "wallet_detail_general", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 一般設定
      /// 
      /// Locales: en, ja
      static let wallet_settings_general = Rswift.StringResource(key: "wallet_settings_general", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 上のボタンからウォレットを作成するか アカウントをリンクすると、ここに一覧で表示されるよ。
      /// 
      /// Locales: en, ja
      static let wallet_no_wallet_message = Rswift.StringResource(key: "wallet_no_wallet_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 以上でウォレットの新規作成作業は完了です。 このままウォレットのバックアップなどを行いたい人はレッスンに移動してね。  とりあえず今のままで使い始めたい人は HOME からスキップもできるよ。
      /// 
      /// Locales: en, ja
      static let wallet_end_message = Rswift.StringResource(key: "wallet_end_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 信頼の革新を手のひらに
      /// 
      /// Locales: en, ja
      static let first_tutorial_title2 = Rswift.StringResource(key: "first_tutorial_title2", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 信頼性が高く 使いやすいUIで、 仮想通貨をもっと楽しく。  ラクーンウォレットは、これら３つを目標に 作られた仮想通貨ウォレットです。
      /// 
      /// Locales: en, ja
      static let about_app_concept = Rswift.StringResource(key: "about_app_concept", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 公式DISCORDサーバー | 紹介リンク
      /// 
      /// Locales: en, ja
      static let about_discord = Rswift.StringResource(key: "about_discord", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 公式サイト | raccoonwallet.com
      /// 
      /// Locales: en, ja
      static let about_official_site = Rswift.StringResource(key: "about_official_site", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 公開鍵
      /// 
      /// Locales: en, ja
      static let common_public_key = Rswift.StringResource(key: "common_public_key", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 再度表示させない
      /// 
      /// Locales: en, ja
      static let common_never_remind = Rswift.StringResource(key: "common_never_remind", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 利用規約とプライバシーポリシー
      /// 
      /// Locales: en, ja
      static let common_privacy_policy = Rswift.StringResource(key: "common_privacy_policy", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 削除
      /// 
      /// Locales: en, ja
      static let common_delete = Rswift.StringResource(key: "common_delete", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 取引所入金時の認証番号に使う場合は問題の原因になりますので、絶対に暗号化は指定しないでください
      /// 
      /// Locales: en, ja
      static let send_message_encrypted_caution = Rswift.StringResource(key: "send_message_encrypted_caution", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 受け取る
      /// 
      /// Locales: en, ja
      static let receive_tab_title = Rswift.StringResource(key: "receive_tab_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 君が送ろうとしているアドレスは、これまで一度もブロックチェーン上で活動していない新参者みたいだね。とはいえアドレスがちゃんとした形式なら、送金は可能だよ。 アドレスは正しいか、送り先は信頼できるか、よく確かめてから手続きしてね。
      /// 
      /// Locales: en, ja
      static let send_newbie_caution_message = Rswift.StringResource(key: "send_newbie_caution_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 売り物リスト機能を使う
      /// 
      /// Locales: en, ja
      static let qrlab_list_headline = Rswift.StringResource(key: "qrlab_list_headline", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 完了
      /// 
      /// Locales: en, ja
      static let common_done = Rswift.StringResource(key: "common_done", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 定義されていないネームスペースです
      /// 
      /// Locales: en, ja
      static let send_invalid_namespace = Rswift.StringResource(key: "send_invalid_namespace", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 寄付
      /// 
      /// Locales: en, ja
      static let common_donation = Rswift.StringResource(key: "common_donation", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 対応コードをスキャンして、合計金額を請求するQRコードを生成する
      /// 
      /// Locales: en, ja
      static let qrlab_register_description = Rswift.StringResource(key: "qrlab_register_description", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 復号に失敗しました
      /// 
      /// Locales: en, ja
      static let transaction_failed_to_decrypt = Rswift.StringResource(key: "transaction_failed_to_decrypt", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 手数料
      /// 
      /// Locales: en, ja
      static let common_fee = Rswift.StringResource(key: "common_fee", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 指定金額を受け取る
      /// 
      /// Locales: en, ja
      static let qrlab_amount_headline = Rswift.StringResource(key: "qrlab_amount_headline", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 指紋認証
      /// 
      /// Locales: en, ja
      static let common_touchID = Rswift.StringResource(key: "common_touchID", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 改めまして、こんにちは。 ラクーンウォレットへようこそ。  さてこれからあなたがラクーンを始めるにあたって、まずはウォレットの準備をお願いしたいと思います。 次の画面で新しくウォレットを作るか、それともすでにブロックチェーンに登録済みのアカウントでログインするかを選んでいただけますか？
      /// 
      /// Locales: en, ja
      static let create_wallet_tutorial_message = Rswift.StringResource(key: "create_wallet_tutorial_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 新しいウォレット名
      /// 
      /// Locales: en, ja
      static let wallet_rename_hint = Rswift.StringResource(key: "wallet_rename_hint", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 普通の送金でいいよ
      /// 
      /// Locales: en
      static let send_standard_message = Rswift.StringResource(key: "send_standard_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 暗号化メッセージ
      /// 
      /// Locales: en, ja
      static let send_message_encrypted_title = Rswift.StringResource(key: "send_message_encrypted_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 暗号化メッセージを送るには、暗号化に必要な公開鍵と呼ばれるコードを送り先が所持している必要があります。 現在指定されている送り先は公開鍵を所持していないため、暗号化メッセージは送れません。
      /// 
      /// Locales: en, ja
      static let send_message_no_public_key_message = Rswift.StringResource(key: "send_message_no_public_key_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 未取得
      /// 
      /// Locales: en, ja
      static let common_not_get = Rswift.StringResource(key: "common_not_get", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 未選択
      /// 
      /// Locales: en, ja
      static let common_not_select = Rswift.StringResource(key: "common_not_select", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 次はPINの設定だ！
      /// 
      /// Locales: en, ja
      static let lesson_beginner_backup_end_title = Rswift.StringResource(key: "lesson_beginner_backup_end_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 残高
      /// 
      /// Locales: en, ja
      static let common_balance = Rswift.StringResource(key: "common_balance", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 残高が足りません！
      /// 
      /// Locales: en, ja
      static let common_error_insufficient_balance = Rswift.StringResource(key: "common_error_insufficient_balance", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 毎度どうも。今日もいい天気ですね。
      /// 
      /// Locales: en, ja
      static let lesson_level_expert_message = Rswift.StringResource(key: "lesson_level_expert_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 気をつけて。送り先はニュービーだ
      /// 
      /// Locales: en, ja
      static let send_newbie_caution_title = Rswift.StringResource(key: "send_newbie_caution_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 添付しない
      /// 
      /// Locales: en, ja
      static let send_mode_not_attach = Rswift.StringResource(key: "send_mode_not_attach", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 添付する
      /// 
      /// Locales: en, ja
      static let send_mode_attach = Rswift.StringResource(key: "send_mode_attach", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 準備完了
      /// 
      /// Locales: en, ja
      static let wallet_create_title = Rswift.StringResource(key: "wallet_create_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 無効なアドレスです
      /// 
      /// Locales: en, ja
      static let common_invalid_address = Rswift.StringResource(key: "common_invalid_address", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 無効な秘密鍵です
      /// 
      /// Locales: en, ja
      static let wallet_invalid_key = Rswift.StringResource(key: "wallet_invalid_key", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 秘密鍵からのログインです
      /// 
      /// Locales: en, ja
      static let lesson_level_importer_title = Rswift.StringResource(key: "lesson_level_importer_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 秘密鍵のインポート
      /// 
      /// Locales: en, ja
      static let wallet_import_title = Rswift.StringResource(key: "wallet_import_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 秘密鍵のバックアップ
      /// 
      /// Locales: en, ja
      static let lesson_expert_title = Rswift.StringResource(key: "lesson_expert_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 秘密鍵のバックアップ+PINコード設定
      /// 
      /// Locales: en, ja
      static let lesson_level_beginner_setup = Rswift.StringResource(key: "lesson_level_beginner_setup", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 端末自体の%@が未設定のようです。 iOSの設定画面に移動して、%@の設定を開始しますか？
      /// 
      /// Locales: en, ja
      static let lesson_pin_end_not_available_message = Rswift.StringResource(key: "lesson_pin_end_not_available_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 紙に書き留める、またはパスワード管理アプリ・ソフトウェアを使って厳重に保管してください。
      /// 
      /// Locales: en, ja
      static let wallet_key_backup_message = Rswift.StringResource(key: "wallet_key_backup_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 自由と共創の新経済が待っています。
      /// 
      /// Locales: en, ja
      static let first_tutorial_message3 = Rswift.StringResource(key: "first_tutorial_message3", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 表示通貨
      /// 
      /// Locales: en, ja
      static let setting_currency_select = Rswift.StringResource(key: "setting_currency_select", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 言語選択
      /// 
      /// Locales: en, ja
      static let setting_language_select = Rswift.StringResource(key: "setting_language_select", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 設定
      /// 
      /// Locales: en, ja
      static let common_settings = Rswift.StringResource(key: "common_settings", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 起動時にPIN入力を要求する
      /// 
      /// Locales: en, ja
      static let setting_require_pin_on_launch = Rswift.StringResource(key: "setting_require_pin_on_launch", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 軍事レベルの暗号化技術でメッセージを安全に送信します
      /// 
      /// Locales: en, ja
      static let send_message_encrypted_description = Rswift.StringResource(key: "send_message_encrypted_description", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送り先
      /// 
      /// Locales: en, ja
      static let common_destination = Rswift.StringResource(key: "common_destination", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送り先が暗号化メッセージに対応していません。
      /// 
      /// Locales: en, ja
      static let send_message_no_public_key_title = Rswift.StringResource(key: "send_message_no_public_key_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送信モードを選んでね
      /// 
      /// Locales: en, ja
      static let send_mode_select_title = Rswift.StringResource(key: "send_mode_select_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送信先
      /// 
      /// Locales: en, ja
      static let send_destination = Rswift.StringResource(key: "send_destination", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送信先アドレスを入力
      /// 
      /// Locales: en, ja
      static let send_input_address = Rswift.StringResource(key: "send_input_address", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送信手続きをする
      /// 
      /// Locales: en, ja
      static let send_tab_title = Rswift.StringResource(key: "send_tab_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送信画面に移動できません
      /// 
      /// Locales: en, ja
      static let common_error_go_send_title = Rswift.StringResource(key: "common_error_go_send_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送受信
      /// 
      /// Locales: en, ja
      static let home_transaction_headline = Rswift.StringResource(key: "home_transaction_headline", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送金の最終確認画面です
      /// 
      /// Locales: en, ja
      static let send_confirmation_title = Rswift.StringResource(key: "send_confirmation_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送金完了！
      /// 
      /// Locales: en, ja
      static let send_complete_title = Rswift.StringResource(key: "send_complete_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送金操作
      /// 
      /// Locales: en, ja
      static let send_amount_setting = Rswift.StringResource(key: "send_amount_setting", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 送金詳細
      /// 
      /// Locales: en, ja
      static let send_complete_transaction_label = Rswift.StringResource(key: "send_complete_transaction_label", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 通信エラー
      /// 
      /// Locales: en, ja
      static let common_error_network = Rswift.StringResource(key: "common_error_network", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 通常のメッセージ
      /// 
      /// Locales: en, ja
      static let send_message_plain_title = Rswift.StringResource(key: "send_message_plain_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 通常のメッセージです。 取引所への認証番号を入力する際は、必ずこちらで行いましょう。
      /// 
      /// Locales: en, ja
      static let send_message_plain_description = Rswift.StringResource(key: "send_message_plain_description", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 通知設定
      /// 
      /// Locales: en, ja
      static let setting_notification_setting = Rswift.StringResource(key: "setting_notification_setting", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 重要性スコア
      /// 
      /// Locales: en, ja
      static let wallet_detail_importance = Rswift.StringResource(key: "wallet_detail_importance", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 金額
      /// 
      /// Locales: en, ja
      static let common_amount = Rswift.StringResource(key: "common_amount", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 金額の指定
      /// 
      /// Locales: en, ja
      static let qrlab_amount_title = Rswift.StringResource(key: "qrlab_amount_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 金額を入力
      /// 
      /// Locales: en, ja
      static let send_amount_title = Rswift.StringResource(key: "send_amount_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 開けゴマ！ 1. NEMの秘密鍵を入力する。 もしくはQRコードで読み取りましょう。 2. あなたのNEMアカウントをラクーンにリンクします！
      /// 
      /// Locales: en, ja
      static let wallet_import_message = Rswift.StringResource(key: "wallet_import_message", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 開発の励みになるよ〜
      /// 
      /// Locales: en, ja
      static let donation_detail_title = Rswift.StringResource(key: "donation_detail_title", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: 顔認証
      /// 
      /// Locales: en, ja
      static let common_faceID = Rswift.StringResource(key: "common_faceID", tableName: "localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: 
      /// 
      /// Locales: en, ja
      static func lesson_pin_end_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_pin_end_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 
      /// 
      /// Locales: en, ja
      static func lesson_pin_end_set_ok(_: Void = ()) -> String {
        return NSLocalizedString("lesson_pin_end_set_ok", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 
      /// 
      /// Locales: en, ja
      static func lesson_pin_end_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_pin_end_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: %@で送金します
      /// 
      /// Locales: en, ja
      static func send_confirmation_biometrics(_ value1: String) -> String {
        return String(format: NSLocalizedString("send_confirmation_biometrics", tableName: "localizable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@によるアクセス設定
      /// 
      /// Locales: en, ja
      static func common_biometrics_enable_title(_ value1: String) -> String {
        return String(format: NSLocalizedString("common_biometrics_enable_title", tableName: "localizable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@の要求
      /// 
      /// Locales: en, ja
      static func setting_require_biometrics(_ value1: String) -> String {
        return String(format: NSLocalizedString("setting_require_biometrics", tableName: "localizable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@を使用したログインが設定されました。
      /// 
      /// Locales: en, ja
      static func common_biometrics_enable_success_message(_ value1: String) -> String {
        return String(format: NSLocalizedString("common_biometrics_enable_success_message", tableName: "localizable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@を使用してアプリのロックを解除できるように設定できます。 OKを押すと、設定を完了します。
      /// 
      /// Locales: en, ja
      static func common_biometrics_enable_message(_ value1: String) -> String {
        return String(format: NSLocalizedString("common_biometrics_enable_message", tableName: "localizable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: 1024文字以内。取引所への認証番号にも使うよ。
      /// 
      /// Locales: en
      static func send_message_hint(_: Void = ()) -> String {
        return NSLocalizedString("send_message_hint", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About This APP
      /// 
      /// Locales: en, ja
      static func about_title(_: Void = ()) -> String {
        return NSLocalizedString("about_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Android Developper
      /// 
      /// Locales: en, ja
      static func donation_android_engineer_name(_: Void = ()) -> String {
        return NSLocalizedString("donation_android_engineer_name", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: God of Raccoon。創造主でエンジニア。 すべてはココからはじまった。彼らがいなかったらラクーンは存在していない。 RaccoonのAndroidエンジニアは二人。@YukiYamadaJPと@Riberd_Puzzle1だ。  ・リードエンジニア / コア開発者 ・ベースアプリ（NEM総合アプリ） 開発 ・Android版アプリ開発
      /// 
      /// Locales: en, ja
      static func donation_android_engineer_detail(_: Void = ()) -> String {
        return NSLocalizedString("donation_android_engineer_detail", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Message SEND
      /// 
      /// Locales: en
      static func send_message_title(_: Void = ()) -> String {
        return NSLocalizedString("send_message_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NEM/XEM の送金が完了しました
      /// 
      /// Locales: en, ja
      static func send_complete_message(_: Void = ()) -> String {
        return NSLocalizedString("send_complete_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NEMユーザーのあなた！ ラクーンウォレットを選んでくれて嬉しいよ。すでによく知っている君には、僕から説明することはあまりないかな。 ここの画面から、PINコードを設定できるから、サクッと設定しといてくれ。  もし秘密鍵のバックアップを取り忘れてたなら、初心者のカードからレッスンを受けてね。
      /// 
      /// Locales: en, ja
      static func lesson_importer_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_importer_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NEM初心者です！
      /// 
      /// Locales: en, ja
      static func lesson_level_beginner_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_beginner_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NEM初心者の君へ捧ぐメッセージ！ 知っている人もいるかもしれないけど、秘密鍵というのは仮想通貨にとって、すごく大事なものなんだ。NEMの場合もそれは同じだよ。バックアップはしっかりね。  それからアプリ本体のPINコード。 スマホをもし落としてしまったりしたとき、アプリにロックをかけておかないと、勝手に送金されてしまうかもしれないよ。 どっちも大事だ。これから対策していくよ。 準備はいいかい？ それじゃあ、やっていこう。
      /// 
      /// Locales: en, ja
      static func lesson_beginner_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_beginner_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NanoWalletで生成したQRコードからNEMアカウントをリンクしようとしています。 この操作には、NanoWalletのパスワードの入力が必要です。
      /// 
      /// Locales: en, ja
      static func wallet_import_nano_password_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_import_nano_password_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NanoWalletのパスワードを入力
      /// 
      /// Locales: en, ja
      static func wallet_import_nano_password_headline(_: Void = ()) -> String {
        return NSLocalizedString("wallet_import_nano_password_headline", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PIN Code が一致しません。 もう一度
      /// 
      /// Locales: en, ja
      static func common_pin_retry(_: Void = ()) -> String {
        return NSLocalizedString("common_pin_retry", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PINが設定されていないため、送信画面に移動できません。 送金操作を行うには、設定からPINの設定を行ってください。
      /// 
      /// Locales: en, ja
      static func common_error_go_send_pin_message(_: Void = ()) -> String {
        return NSLocalizedString("common_error_go_send_pin_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PINの設定がまだのようですね。先にPINの設定をしてください。
      /// 
      /// Locales: en, ja
      static func setting_pin_not_available_message(_: Void = ()) -> String {
        return NSLocalizedString("setting_pin_not_available_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PINを入力して送金を確定する
      /// 
      /// Locales: en, ja
      static func send_confirmation_pin_message(_: Void = ()) -> String {
        return NSLocalizedString("send_confirmation_pin_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PINコードが未設定です。先にPINコードの設定を行ってください。
      /// 
      /// Locales: en, ja
      static func common_error_pin_not_set(_: Void = ()) -> String {
        return NSLocalizedString("common_error_pin_not_set", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PINコードの設定
      /// 
      /// Locales: en, ja
      static func common_pin_settings(_: Void = ()) -> String {
        return NSLocalizedString("common_pin_settings", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PINコードの設定・変更
      /// 
      /// Locales: en, ja
      static func setting_change_password(_: Void = ()) -> String {
        return NSLocalizedString("setting_change_password", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PINコード設定
      /// 
      /// Locales: en, ja
      static func lesson_level_importer_setup(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_importer_setup", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PIN設定画面に移動する
      /// 
      /// Locales: en, ja
      static func common_error_go_send_pin_button(_: Void = ()) -> String {
        return NSLocalizedString("common_error_go_send_pin_button", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QRコードのインポート
      /// 
      /// Locales: en, ja
      static func common_qr_import(_: Void = ()) -> String {
        return NSLocalizedString("common_qr_import", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QRレジスター
      /// 
      /// Locales: en, ja
      static func qrlab_register_headline(_: Void = ()) -> String {
        return NSLocalizedString("qrlab_register_headline", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: RaccoonWallet
      /// 
      /// Locales: en, ja
      static func common_app_title(_: Void = ()) -> String {
        return NSLocalizedString("common_app_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Raccoonの名付け親。デザイナー。 このアプリふざけてんなぁと思ったら、この人のせい。 ラクーンにおけるデザインの大体は、この人が作った。 使いやすいアプリの構造を考えたりする情報アーキテクチャも兼任した。  ・総合コンテンツデザイナー ・Android / iOSアプリのIA/UI/UXデザイン ・ビジュアルデザイン/ブランディング（ロゴ・サイト）
      /// 
      /// Locales: en, ja
      static func donation_designer_detail(_: Void = ()) -> String {
        return NSLocalizedString("donation_designer_detail", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Raccoonの命綱。iOSエンジニア。最強の後衛。 将棋で例えるなら飛車。 ラクーンを林檎の楽園へといざなう。  ・Android→iOS版アプリ移植・開発主任 ・nem-kotlinの創造主。
      /// 
      /// Locales: en, ja
      static func donation_ios_engineer_detail(_: Void = ()) -> String {
        return NSLocalizedString("donation_ios_engineer_detail", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rhime
      /// 
      /// Locales: en, ja
      static func donation_designer_name(_: Void = ()) -> String {
        return NSLocalizedString("donation_designer_name", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ryuta
      /// 
      /// Locales: en, ja
      static func donation_ios_engineer_name(_: Void = ()) -> String {
        return NSLocalizedString("donation_ios_engineer_name", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: STANDARD SEND
      /// 
      /// Locales: en
      static func send_standard_title(_: Void = ()) -> String {
        return NSLocalizedString("send_standard_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SUCCESS
      /// 
      /// Locales: en, ja
      static func common_success(_: Void = ()) -> String {
        return NSLocalizedString("common_success", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SUCCESS！
      /// 
      /// Locales: en, ja
      static func common_biometrics_enable_success_title(_: Void = ()) -> String {
        return NSLocalizedString("common_biometrics_enable_success_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: UIデザイナー
      /// 
      /// Locales: en, ja
      static func donation_designer_role(_: Void = ()) -> String {
        return NSLocalizedString("donation_designer_role", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Walletの名前をインポート
      /// 
      /// Locales: en, ja
      static func wallet_login_name_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_login_name_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Welcome to Raccoon Wallet
      /// 
      /// Locales: en, ja
      static func create_wallet_tutorial_title(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_tutorial_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: XEMを一緒に送る
      /// 
      /// Locales: en, ja
      static func send_amount_with_xem(_: Void = ()) -> String {
        return NSLocalizedString("send_amount_with_xem", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: iOSエンジニア
      /// 
      /// Locales: en, ja
      static func donation_ios_engineer_role(_: Void = ()) -> String {
        return NSLocalizedString("donation_ios_engineer_role", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: …上に出てきたナンバーは何かって？ ウォレットのメンテンスしたいときは押すが良い。 この画面では動作しないからあとで試してみてくれ。
      /// 
      /// Locales: en, ja
      static func wallet_create_message_1(_: Void = ()) -> String {
        return NSLocalizedString("wallet_create_message_1", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 　おっと！
      /// 
      /// Locales: en, ja
      static func lesson_cancel_pin_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_cancel_pin_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: あっ、なんだ君か。 そうそう、聞いてよ。最近、人にものを教えるのって大変だなって痛感してるんだ。なんでも３倍理解してないとダメだとか。僕の苦労も報われるといいのだけど。 そう思わない？ え？秘密鍵のバックアップ？次の画面だよ。 そうそう、それでさ～。
      /// 
      /// Locales: en, ja
      static func lesson_expert_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_expert_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: いいセンスだ。 以上でリンク作業は完了しました。ウォレットの変更や追加をしたい場合は、 ウォレットバーのボタンから管理画面に アクセスしてみてくださいね。 もし時間があるなら、この後のセキュリティレッスンの受講をオススメします。PINコードの設定やウォレットのバックアップを行うぞ。
      /// 
      /// Locales: en, ja
      static func wallet_login_end_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_login_end_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: いつもラクーンウォレットを使ってくれてありがとう。  てなわけで、セキュリティレッスンは以上で終わり。 ウォレットにもそろそろ慣れてきたんじゃないかい？ とはいえ事前の対策を疎かにはしないでね。  曾子曰く、人生とは、 死而後巳（死してのち巳む）。 くたばって初めて油断できるのさ。 また会おうぜ。グッドラック。
      /// 
      /// Locales: en, ja
      static func lesson_expert_end_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_expert_end_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: おっと!
      /// 
      /// Locales: en, ja
      static func setting_pin_not_available_title(_: Void = ()) -> String {
        return NSLocalizedString("setting_pin_not_available_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: おっと。まだ取引はないみたい。
      /// 
      /// Locales: en, ja
      static func transaction_no_transaction_title(_: Void = ()) -> String {
        return NSLocalizedString("transaction_no_transaction_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: おっと！
      /// 
      /// Locales: en, ja
      static func lesson_pin_end_not_available_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_pin_end_not_available_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: おっと！
      /// 
      /// Locales: en, ja
      static func wallet_go_home_caution1_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_go_home_caution1_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: おや?寄付してくれるのかい!?
      /// 
      /// Locales: en, ja
      static func donation_title(_: Void = ()) -> String {
        return NSLocalizedString("donation_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: お会いできて光栄です。 ブロックチェーンを使った新しい経済活動を 一緒にはじめましょう
      /// 
      /// Locales: en, ja
      static func first_tutorial_message1(_: Void = ()) -> String {
        return NSLocalizedString("first_tutorial_message1", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: お疲れ様！
      /// 
      /// Locales: en, ja
      static func lesson_end_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_end_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: お疲れ様！レッスンはどう？
      /// 
      /// Locales: en, ja
      static func wallet_end_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_end_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: お見せできるモザイクは、これっぽっちもないよ。 涙がちょちょ切れるほどコレクションに励もう。
      /// 
      /// Locales: en, ja
      static func gallery_no_mosaic_message(_: Void = ()) -> String {
        return NSLocalizedString("gallery_no_mosaic_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: このPINコードを忘れた場合、アプリの操作ができなくなります。忘れないようにしてください。ただしPINコードを忘れた場合でもウォレットのXEMが無くなるわけではありません。 アドレスごとの秘密鍵を紛失した場合のみ資産にアクセスできなくなります。
      /// 
      /// Locales: en, ja
      static func common_pin_registration_message_1(_: Void = ()) -> String {
        return NSLocalizedString("common_pin_registration_message_1", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: この画面で指紋認証またはPINの認証が完了すると、送金が完了します。 表示された情報をよくご確認の上、操作してください。
      /// 
      /// Locales: en, ja
      static func send_confirmation_dialog_message(_: Void = ()) -> String {
        return NSLocalizedString("send_confirmation_dialog_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: すばらしい！ウォレット作成完了です。 あっという間。驚いた？ とりあえず君のアドレスはこんな感じ。
      /// 
      /// Locales: en, ja
      static func wallet_create_message_0(_: Void = ()) -> String {
        return NSLocalizedString("wallet_create_message_0", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: すばらしい！！ これで君も立派なクリプトコイナーというわけだ。 感慨深いね。  てなわけで、セキュリティレッスンは以上で終わり。 暇があったらメニューからヘルプも覗くと良いよ。 まあ後は使いながら覚えていってくれ。 月に叢雲花に風。 さよならだけが人生さ。 また会おうぜ。グッドラック。
      /// 
      /// Locales: en, ja
      static func lesson_beginner_end_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_beginner_end_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: すべてが暗号通貨ベースで設計され、 すべてが新しい考え方で動く、 ニューエコノミープラットフォーム。 魅力的な体験は、ここからはじまります。
      /// 
      /// Locales: en, ja
      static func first_tutorial_message2(_: Void = ()) -> String {
        return NSLocalizedString("first_tutorial_message2", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: すべての人に経済を。
      /// 
      /// Locales: en, ja
      static func first_tutorial_title3(_: Void = ()) -> String {
        return NSLocalizedString("first_tutorial_title3", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: はじめまして
      /// 
      /// Locales: en, ja
      static func first_tutorial_title1(_: Void = ()) -> String {
        return NSLocalizedString("first_tutorial_title1", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: はじめる
      /// 
      /// Locales: en, ja
      static func first_tutorial_button(_: Void = ()) -> String {
        return NSLocalizedString("first_tutorial_button", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ほんとにHOMEに行くのかい？ セキュリティはちゃんとしといたほうがいいよ。
      /// 
      /// Locales: en, ja
      static func wallet_go_home_caution1_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_go_home_caution1_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ほんとにほんとだね？止めはしないよ。 もしウォレットのバックアップやPINコードを設定したくなったら、ウォレットバーやメニューのアプリ設定からいつでも行えるよ。それにレッスンもアプリ設定のセキュリティの項目から受講できるからね。
      /// 
      /// Locales: en, ja
      static func wallet_go_home_caution2_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_go_home_caution2_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ほんとに？
      /// 
      /// Locales: en, ja
      static func wallet_go_home_caution2_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_go_home_caution2_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: まだハーベストの履歴はありません。
      /// 
      /// Locales: en, ja
      static func home_harvest_empty_message(_: Void = ()) -> String {
        return NSLocalizedString("home_harvest_empty_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: まだ送受信の履歴はありません。
      /// 
      /// Locales: en, ja
      static func home_transaction_empty_message(_: Void = ()) -> String {
        return NSLocalizedString("home_transaction_empty_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: また会ったな。 ウォレットのバックアップはできたかい？ さあ次は、アプリのPINコード設定だ。  グッドラック！
      /// 
      /// Locales: en, ja
      static func lesson_beginner_backup_end_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_beginner_backup_end_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: もうPINは設定してあるみたいだね。 OKを押してレッスンを終えてもらっていいよ。 お疲れ様！
      /// 
      /// Locales: en, ja
      static func lesson_cancel_pin_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_cancel_pin_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: やあ。セキュリティレッスンを受けに来たのかい？ 感心感心 よーし、それじゃあ早速やっていこう。  じゃあ、まず最初に君のことを教えてくれないかい？ 次の画面で自分に合うものを選択してくれ。 特別にみんなに最適なレッスン用意したからさ。
      /// 
      /// Locales: en, ja
      static func lesson_introduction_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_introduction_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ようこそNEMの世界へ。
      /// 
      /// Locales: en, ja
      static func lesson_level_beginner_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_beginner_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ようこそ、お客人
      /// 
      /// Locales: en, ja
      static func wallet_name_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_name_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: アカウント情報の復元に失敗しました。
      /// 
      /// Locales: en, ja
      static func common_error_account_repair(_: Void = ()) -> String {
        return NSLocalizedString("common_error_account_repair", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: アドレス
      /// 
      /// Locales: en, ja
      static func common_address(_: Void = ()) -> String {
        return NSLocalizedString("common_address", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: アドレス帳
      /// 
      /// Locales: en, ja
      static func common_address_book(_: Void = ()) -> String {
        return NSLocalizedString("common_address_book", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: アプリの利用を開始する前に、ご確認ください。
      /// 
      /// Locales: en, ja
      static func common_privacy_policy_caution(_: Void = ()) -> String {
        return NSLocalizedString("common_privacy_policy_caution", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: アプリ本体を保護するための6桁のPINコードが設定されました。
      /// 
      /// Locales: en, ja
      static func common_pin_registration_complete(_: Void = ()) -> String {
        return NSLocalizedString("common_pin_registration_complete", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: アプリ本体を保護するためのPINコードを設定します。6桁のPINコードを入力してください。 確認のため二度入力します。 ※数字の繰り返しや誕生日などを含むコードはセキュリティの観点からおすすめしません。 
      /// 
      /// Locales: en, ja
      static func common_pin_registration_message_0(_: Void = ()) -> String {
        return NSLocalizedString("common_pin_registration_message_0", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットがないみたい。
      /// 
      /// Locales: en, ja
      static func wallet_no_wallet_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_no_wallet_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットが選択されていないため、送信画面に移動できません。 送金操作を行うには、ウォレットを選択してください。
      /// 
      /// Locales: en, ja
      static func common_error_go_send_no_wallet_message(_: Void = ()) -> String {
        return NSLocalizedString("common_error_go_send_no_wallet_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットが選択されていません
      /// 
      /// Locales: en, ja
      static func wallet_not_select_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_not_select_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットのアドレス
      /// 
      /// Locales: en, ja
      static func wallet_settings_address(_: Void = ()) -> String {
        return NSLocalizedString("wallet_settings_address", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットのバックアップ
      /// 
      /// Locales: en, ja
      static func lesson_level_expert_setup(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_expert_setup", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットのバックアップ
      /// 
      /// Locales: en, ja
      static func wallet_settings_backup(_: Void = ()) -> String {
        return NSLocalizedString("wallet_settings_backup", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットの名前を変更する
      /// 
      /// Locales: en, ja
      static func wallet_settings_rename(_: Void = ()) -> String {
        return NSLocalizedString("wallet_settings_rename", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットの設定
      /// 
      /// Locales: en, ja
      static func wallet_settings_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_settings_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットの詳細
      /// 
      /// Locales: en, ja
      static func wallet_detail_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_detail_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットの詳細
      /// 
      /// Locales: en, ja
      static func wallet_settings_detail(_: Void = ()) -> String {
        return NSLocalizedString("wallet_settings_detail", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットを削除
      /// 
      /// Locales: en, ja
      static func wallet_settings_delete(_: Void = ()) -> String {
        return NSLocalizedString("wallet_settings_delete", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットを削除します。 秘密鍵がないと復元できなくなります。 本当にウォレットを削除しますか？
      /// 
      /// Locales: en, ja
      static func wallet_delete_caution_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_delete_caution_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレットを選択
      /// 
      /// Locales: en, ja
      static func wallet_select(_: Void = ()) -> String {
        return NSLocalizedString("wallet_select", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレット名変更
      /// 
      /// Locales: en, ja
      static func wallet_rename_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_rename_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレット構成 (m-of-n)
      /// 
      /// Locales: en, ja
      static func wallet_detail_structure(_: Void = ()) -> String {
        return NSLocalizedString("wallet_detail_structure", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレット残高
      /// 
      /// Locales: en, ja
      static func common_wallet_balance(_: Void = ()) -> String {
        return NSLocalizedString("common_wallet_balance", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ウォレット選択画面に移動する
      /// 
      /// Locales: en, ja
      static func common_error_go_send_no_wallet_button(_: Void = ()) -> String {
        return NSLocalizedString("common_error_go_send_no_wallet_button", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: エンジニア
      /// 
      /// Locales: en, ja
      static func donation_android_engineer_role(_: Void = ()) -> String {
        return NSLocalizedString("donation_android_engineer_role", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: オープンソースライセンス
      /// 
      /// Locales: en, ja
      static func about_open_source(_: Void = ()) -> String {
        return NSLocalizedString("about_open_source", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: カミングスーン
      /// 
      /// Locales: en, ja
      static func common_coming_soon(_: Void = ()) -> String {
        return NSLocalizedString("common_coming_soon", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: グレイト！ アカウントのリンクが正常に行われました。 ウォレットに名前をつけると便利です。
      /// 
      /// Locales: en, ja
      static func wallet_login_name_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_login_name_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: クリップボードにコピーしました
      /// 
      /// Locales: en, ja
      static func common_copy_to_clipboard(_: Void = ()) -> String {
        return NSLocalizedString("common_copy_to_clipboard", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: スクリーンショットに撮るのは危険です。
      /// 
      /// Locales: en, ja
      static func wallet_key_backup_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_key_backup_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: セキュリティ
      /// 
      /// Locales: en, ja
      static func common_security(_: Void = ()) -> String {
        return NSLocalizedString("common_security", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: セキュリティレッスン
      /// 
      /// Locales: en, ja
      static func common_security_lesson(_: Void = ()) -> String {
        return NSLocalizedString("common_security_lesson", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: セキュリティレッスンを受ける
      /// 
      /// Locales: en, ja
      static func setting_go_to_security_lesson(_: Void = ()) -> String {
        return NSLocalizedString("setting_go_to_security_lesson", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: セレクトユアレベル！
      /// 
      /// Locales: en, ja
      static func lesson_level_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: タップして認証画面を表示
      /// 
      /// Locales: en, ja
      static func send_confirmation_button(_: Void = ()) -> String {
        return NSLocalizedString("send_confirmation_button", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: トランザクションが発生したら ここに一覧で表示されるよ。
      /// 
      /// Locales: en, ja
      static func transaction_no_transaction_message(_: Void = ()) -> String {
        return NSLocalizedString("transaction_no_transaction_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: トランザクションにメッセージを添えます
      /// 
      /// Locales: en
      static func send_message_message(_: Void = ()) -> String {
        return NSLocalizedString("send_message_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: トランザクション一覧
      /// 
      /// Locales: en, ja
      static func transaction_list_title(_: Void = ()) -> String {
        return NSLocalizedString("transaction_list_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: トランザクション詳細
      /// 
      /// Locales: en, ja
      static func transaction_detail_title(_: Void = ()) -> String {
        return NSLocalizedString("transaction_detail_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ニュービーな君へ
      /// 
      /// Locales: en, ja
      static func lesson_beginner_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_beginner_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ノード選択
      /// 
      /// Locales: en, ja
      static func setting_node_select(_: Void = ()) -> String {
        return NSLocalizedString("setting_node_select", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: バックアップ
      /// 
      /// Locales: en, ja
      static func common_backup(_: Void = ()) -> String {
        return NSLocalizedString("common_backup", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: パスワードが一致しません
      /// 
      /// Locales: en, ja
      static func common_invalid_password(_: Void = ()) -> String {
        return NSLocalizedString("common_invalid_password", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: パスワードを入れてね
      /// 
      /// Locales: en, ja
      static func wallet_import_nano_password_hint(_: Void = ()) -> String {
        return NSLocalizedString("wallet_import_nano_password_hint", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: パスワード入力
      /// 
      /// Locales: en, ja
      static func wallet_import_nano_password_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_import_nano_password_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ハロー。ウェルカム・トゥ・ラクーン。 早速、君のウォレットを作っていこう。 まず最初に、ウォレットにイケてる名前をつけてくれ。
      /// 
      /// Locales: en, ja
      static func wallet_name_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_name_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ハーベスト
      /// 
      /// Locales: en, ja
      static func common_harvest(_: Void = ()) -> String {
        return NSLocalizedString("common_harvest", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: プライベートキー(秘密鍵)について
      /// 
      /// Locales: en, ja
      static func wallet_key_caution_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_key_caution_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: プライベートキー（秘密鍵）はあなたのアカウント情報において最も重要であり、機密事項として注意して取り扱わなければなりません。  プライベートキーは、関連する資金と資産を制御し、あなたのアカウントを元に戻すために必要なものであり、この知識は誰もが身につける必要があります。  このプライベートキーは、決してなくさないようにしてください。 また絶対に外部に漏れないように注意して扱ってください。
      /// 
      /// Locales: en, ja
      static func wallet_key_caution_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_key_caution_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: メッセージ
      /// 
      /// Locales: en, ja
      static func common_message(_: Void = ()) -> String {
        return NSLocalizedString("common_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: メッセージの復元に失敗しました
      /// 
      /// Locales: en, ja
      static func common_error_decode_message(_: Void = ()) -> String {
        return NSLocalizedString("common_error_decode_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: メッセージは暗号化されています
      /// 
      /// Locales: en, ja
      static func transaction_message_is_encrypted(_: Void = ()) -> String {
        return NSLocalizedString("transaction_message_is_encrypted", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: メッセージは添付せずに送金します。
      /// 
      /// Locales: en
      static func send_standard_hint(_: Void = ()) -> String {
        return NSLocalizedString("send_standard_hint", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: メッセージを入力
      /// 
      /// Locales: en, ja
      static func common_message_input(_: Void = ()) -> String {
        return NSLocalizedString("common_message_input", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: メッセージを添付しますか？
      /// 
      /// Locales: en, ja
      static func send_mode_select_message(_: Void = ()) -> String {
        return NSLocalizedString("send_mode_select_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: メッセージタイプの暗号化設定
      /// 
      /// Locales: en, ja
      static func send_message_type_select_title(_: Void = ()) -> String {
        return NSLocalizedString("send_message_type_select_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: モザイクなど存在しない。
      /// 
      /// Locales: en, ja
      static func gallery_no_mosaic_title(_: Void = ()) -> String {
        return NSLocalizedString("gallery_no_mosaic_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: モザイクギャラリー
      /// 
      /// Locales: en, ja
      static func common_mosaic_gallery(_: Void = ()) -> String {
        return NSLocalizedString("common_mosaic_gallery", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: モザイク一覧
      /// 
      /// Locales: en, ja
      static func common_mosaic_list(_: Void = ()) -> String {
        return NSLocalizedString("common_mosaic_list", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: モザイク添付
      /// 
      /// Locales: en, ja
      static func send_mosaic_setting(_: Void = ()) -> String {
        return NSLocalizedString("send_mosaic_setting", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ラクーンを選んでくれてありがとう〜
      /// 
      /// Locales: en, ja
      static func lesson_level_importer_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_importer_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ラクーンユーザーです
      /// 
      /// Locales: en, ja
      static func lesson_level_expert_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_expert_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: リンク完了
      /// 
      /// Locales: en, ja
      static func wallet_login_end_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_login_end_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: レッスンお疲れ様。仮想通貨の活動をラクーンで行うことを選択した君を後悔させないように頑張るよ。 このウォレット自体の使い方は、メニューからアクセスできるヘルプから学習してほしい。  ゆく河の流れは絶えずして、しかももとの水にあらず。 いづかたより来たりて、いづかたへか去る君との出会いに感謝するよ。 グッドラック。
      /// 
      /// Locales: en, ja
      static func lesson_importer_end_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_importer_end_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: レッスンを終える
      /// 
      /// Locales: en, ja
      static func lesson_pin_end_home(_: Void = ()) -> String {
        return NSLocalizedString("lesson_pin_end_home", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: レビューを書く
      /// 
      /// Locales: en, ja
      static func about_review(_: Void = ()) -> String {
        return NSLocalizedString("about_review", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 一番いいウォレットネームを
      /// 
      /// Locales: en, ja
      static func wallet_name_input(_: Void = ()) -> String {
        return NSLocalizedString("wallet_name_input", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 一般
      /// 
      /// Locales: en, ja
      static func common_general(_: Void = ()) -> String {
        return NSLocalizedString("common_general", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 一般情報
      /// 
      /// Locales: en, ja
      static func wallet_detail_general(_: Void = ()) -> String {
        return NSLocalizedString("wallet_detail_general", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 一般設定
      /// 
      /// Locales: en, ja
      static func wallet_settings_general(_: Void = ()) -> String {
        return NSLocalizedString("wallet_settings_general", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 上のボタンからウォレットを作成するか アカウントをリンクすると、ここに一覧で表示されるよ。
      /// 
      /// Locales: en, ja
      static func wallet_no_wallet_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_no_wallet_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 以上でウォレットの新規作成作業は完了です。 このままウォレットのバックアップなどを行いたい人はレッスンに移動してね。  とりあえず今のままで使い始めたい人は HOME からスキップもできるよ。
      /// 
      /// Locales: en, ja
      static func wallet_end_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_end_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 信頼の革新を手のひらに
      /// 
      /// Locales: en, ja
      static func first_tutorial_title2(_: Void = ()) -> String {
        return NSLocalizedString("first_tutorial_title2", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 信頼性が高く 使いやすいUIで、 仮想通貨をもっと楽しく。  ラクーンウォレットは、これら３つを目標に 作られた仮想通貨ウォレットです。
      /// 
      /// Locales: en, ja
      static func about_app_concept(_: Void = ()) -> String {
        return NSLocalizedString("about_app_concept", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 公式DISCORDサーバー | 紹介リンク
      /// 
      /// Locales: en, ja
      static func about_discord(_: Void = ()) -> String {
        return NSLocalizedString("about_discord", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 公式サイト | raccoonwallet.com
      /// 
      /// Locales: en, ja
      static func about_official_site(_: Void = ()) -> String {
        return NSLocalizedString("about_official_site", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 公開鍵
      /// 
      /// Locales: en, ja
      static func common_public_key(_: Void = ()) -> String {
        return NSLocalizedString("common_public_key", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 再度表示させない
      /// 
      /// Locales: en, ja
      static func common_never_remind(_: Void = ()) -> String {
        return NSLocalizedString("common_never_remind", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 利用規約とプライバシーポリシー
      /// 
      /// Locales: en, ja
      static func common_privacy_policy(_: Void = ()) -> String {
        return NSLocalizedString("common_privacy_policy", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 削除
      /// 
      /// Locales: en, ja
      static func common_delete(_: Void = ()) -> String {
        return NSLocalizedString("common_delete", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 取引所入金時の認証番号に使う場合は問題の原因になりますので、絶対に暗号化は指定しないでください
      /// 
      /// Locales: en, ja
      static func send_message_encrypted_caution(_: Void = ()) -> String {
        return NSLocalizedString("send_message_encrypted_caution", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 受け取る
      /// 
      /// Locales: en, ja
      static func receive_tab_title(_: Void = ()) -> String {
        return NSLocalizedString("receive_tab_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 君が送ろうとしているアドレスは、これまで一度もブロックチェーン上で活動していない新参者みたいだね。とはいえアドレスがちゃんとした形式なら、送金は可能だよ。 アドレスは正しいか、送り先は信頼できるか、よく確かめてから手続きしてね。
      /// 
      /// Locales: en, ja
      static func send_newbie_caution_message(_: Void = ()) -> String {
        return NSLocalizedString("send_newbie_caution_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 売り物リスト機能を使う
      /// 
      /// Locales: en, ja
      static func qrlab_list_headline(_: Void = ()) -> String {
        return NSLocalizedString("qrlab_list_headline", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 完了
      /// 
      /// Locales: en, ja
      static func common_done(_: Void = ()) -> String {
        return NSLocalizedString("common_done", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 定義されていないネームスペースです
      /// 
      /// Locales: en, ja
      static func send_invalid_namespace(_: Void = ()) -> String {
        return NSLocalizedString("send_invalid_namespace", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 寄付
      /// 
      /// Locales: en, ja
      static func common_donation(_: Void = ()) -> String {
        return NSLocalizedString("common_donation", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 対応コードをスキャンして、合計金額を請求するQRコードを生成する
      /// 
      /// Locales: en, ja
      static func qrlab_register_description(_: Void = ()) -> String {
        return NSLocalizedString("qrlab_register_description", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 復号に失敗しました
      /// 
      /// Locales: en, ja
      static func transaction_failed_to_decrypt(_: Void = ()) -> String {
        return NSLocalizedString("transaction_failed_to_decrypt", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 手数料
      /// 
      /// Locales: en, ja
      static func common_fee(_: Void = ()) -> String {
        return NSLocalizedString("common_fee", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 指定金額を受け取る
      /// 
      /// Locales: en, ja
      static func qrlab_amount_headline(_: Void = ()) -> String {
        return NSLocalizedString("qrlab_amount_headline", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 指紋認証
      /// 
      /// Locales: en, ja
      static func common_touchID(_: Void = ()) -> String {
        return NSLocalizedString("common_touchID", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 改めまして、こんにちは。 ラクーンウォレットへようこそ。  さてこれからあなたがラクーンを始めるにあたって、まずはウォレットの準備をお願いしたいと思います。 次の画面で新しくウォレットを作るか、それともすでにブロックチェーンに登録済みのアカウントでログインするかを選んでいただけますか？
      /// 
      /// Locales: en, ja
      static func create_wallet_tutorial_message(_: Void = ()) -> String {
        return NSLocalizedString("create_wallet_tutorial_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 新しいウォレット名
      /// 
      /// Locales: en, ja
      static func wallet_rename_hint(_: Void = ()) -> String {
        return NSLocalizedString("wallet_rename_hint", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 普通の送金でいいよ
      /// 
      /// Locales: en
      static func send_standard_message(_: Void = ()) -> String {
        return NSLocalizedString("send_standard_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 暗号化メッセージ
      /// 
      /// Locales: en, ja
      static func send_message_encrypted_title(_: Void = ()) -> String {
        return NSLocalizedString("send_message_encrypted_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 暗号化メッセージを送るには、暗号化に必要な公開鍵と呼ばれるコードを送り先が所持している必要があります。 現在指定されている送り先は公開鍵を所持していないため、暗号化メッセージは送れません。
      /// 
      /// Locales: en, ja
      static func send_message_no_public_key_message(_: Void = ()) -> String {
        return NSLocalizedString("send_message_no_public_key_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 未取得
      /// 
      /// Locales: en, ja
      static func common_not_get(_: Void = ()) -> String {
        return NSLocalizedString("common_not_get", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 未選択
      /// 
      /// Locales: en, ja
      static func common_not_select(_: Void = ()) -> String {
        return NSLocalizedString("common_not_select", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 次はPINの設定だ！
      /// 
      /// Locales: en, ja
      static func lesson_beginner_backup_end_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_beginner_backup_end_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 残高
      /// 
      /// Locales: en, ja
      static func common_balance(_: Void = ()) -> String {
        return NSLocalizedString("common_balance", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 残高が足りません！
      /// 
      /// Locales: en, ja
      static func common_error_insufficient_balance(_: Void = ()) -> String {
        return NSLocalizedString("common_error_insufficient_balance", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 毎度どうも。今日もいい天気ですね。
      /// 
      /// Locales: en, ja
      static func lesson_level_expert_message(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_expert_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 気をつけて。送り先はニュービーだ
      /// 
      /// Locales: en, ja
      static func send_newbie_caution_title(_: Void = ()) -> String {
        return NSLocalizedString("send_newbie_caution_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 添付しない
      /// 
      /// Locales: en, ja
      static func send_mode_not_attach(_: Void = ()) -> String {
        return NSLocalizedString("send_mode_not_attach", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 添付する
      /// 
      /// Locales: en, ja
      static func send_mode_attach(_: Void = ()) -> String {
        return NSLocalizedString("send_mode_attach", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 準備完了
      /// 
      /// Locales: en, ja
      static func wallet_create_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_create_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 無効なアドレスです
      /// 
      /// Locales: en, ja
      static func common_invalid_address(_: Void = ()) -> String {
        return NSLocalizedString("common_invalid_address", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 無効な秘密鍵です
      /// 
      /// Locales: en, ja
      static func wallet_invalid_key(_: Void = ()) -> String {
        return NSLocalizedString("wallet_invalid_key", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 秘密鍵からのログインです
      /// 
      /// Locales: en, ja
      static func lesson_level_importer_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_importer_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 秘密鍵のインポート
      /// 
      /// Locales: en, ja
      static func wallet_import_title(_: Void = ()) -> String {
        return NSLocalizedString("wallet_import_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 秘密鍵のバックアップ
      /// 
      /// Locales: en, ja
      static func lesson_expert_title(_: Void = ()) -> String {
        return NSLocalizedString("lesson_expert_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 秘密鍵のバックアップ+PINコード設定
      /// 
      /// Locales: en, ja
      static func lesson_level_beginner_setup(_: Void = ()) -> String {
        return NSLocalizedString("lesson_level_beginner_setup", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 端末自体の%@が未設定のようです。 iOSの設定画面に移動して、%@の設定を開始しますか？
      /// 
      /// Locales: en, ja
      static func lesson_pin_end_not_available_message(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("lesson_pin_end_not_available_message", tableName: "localizable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: 紙に書き留める、またはパスワード管理アプリ・ソフトウェアを使って厳重に保管してください。
      /// 
      /// Locales: en, ja
      static func wallet_key_backup_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_key_backup_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 自由と共創の新経済が待っています。
      /// 
      /// Locales: en, ja
      static func first_tutorial_message3(_: Void = ()) -> String {
        return NSLocalizedString("first_tutorial_message3", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 表示通貨
      /// 
      /// Locales: en, ja
      static func setting_currency_select(_: Void = ()) -> String {
        return NSLocalizedString("setting_currency_select", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 言語選択
      /// 
      /// Locales: en, ja
      static func setting_language_select(_: Void = ()) -> String {
        return NSLocalizedString("setting_language_select", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 設定
      /// 
      /// Locales: en, ja
      static func common_settings(_: Void = ()) -> String {
        return NSLocalizedString("common_settings", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 起動時にPIN入力を要求する
      /// 
      /// Locales: en, ja
      static func setting_require_pin_on_launch(_: Void = ()) -> String {
        return NSLocalizedString("setting_require_pin_on_launch", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 軍事レベルの暗号化技術でメッセージを安全に送信します
      /// 
      /// Locales: en, ja
      static func send_message_encrypted_description(_: Void = ()) -> String {
        return NSLocalizedString("send_message_encrypted_description", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送り先
      /// 
      /// Locales: en, ja
      static func common_destination(_: Void = ()) -> String {
        return NSLocalizedString("common_destination", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送り先が暗号化メッセージに対応していません。
      /// 
      /// Locales: en, ja
      static func send_message_no_public_key_title(_: Void = ()) -> String {
        return NSLocalizedString("send_message_no_public_key_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送信モードを選んでね
      /// 
      /// Locales: en, ja
      static func send_mode_select_title(_: Void = ()) -> String {
        return NSLocalizedString("send_mode_select_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送信先
      /// 
      /// Locales: en, ja
      static func send_destination(_: Void = ()) -> String {
        return NSLocalizedString("send_destination", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送信先アドレスを入力
      /// 
      /// Locales: en, ja
      static func send_input_address(_: Void = ()) -> String {
        return NSLocalizedString("send_input_address", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送信手続きをする
      /// 
      /// Locales: en, ja
      static func send_tab_title(_: Void = ()) -> String {
        return NSLocalizedString("send_tab_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送信画面に移動できません
      /// 
      /// Locales: en, ja
      static func common_error_go_send_title(_: Void = ()) -> String {
        return NSLocalizedString("common_error_go_send_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送受信
      /// 
      /// Locales: en, ja
      static func home_transaction_headline(_: Void = ()) -> String {
        return NSLocalizedString("home_transaction_headline", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送金の最終確認画面です
      /// 
      /// Locales: en, ja
      static func send_confirmation_title(_: Void = ()) -> String {
        return NSLocalizedString("send_confirmation_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送金完了！
      /// 
      /// Locales: en, ja
      static func send_complete_title(_: Void = ()) -> String {
        return NSLocalizedString("send_complete_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送金操作
      /// 
      /// Locales: en, ja
      static func send_amount_setting(_: Void = ()) -> String {
        return NSLocalizedString("send_amount_setting", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 送金詳細
      /// 
      /// Locales: en, ja
      static func send_complete_transaction_label(_: Void = ()) -> String {
        return NSLocalizedString("send_complete_transaction_label", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 通信エラー
      /// 
      /// Locales: en, ja
      static func common_error_network(_: Void = ()) -> String {
        return NSLocalizedString("common_error_network", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 通常のメッセージ
      /// 
      /// Locales: en, ja
      static func send_message_plain_title(_: Void = ()) -> String {
        return NSLocalizedString("send_message_plain_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 通常のメッセージです。 取引所への認証番号を入力する際は、必ずこちらで行いましょう。
      /// 
      /// Locales: en, ja
      static func send_message_plain_description(_: Void = ()) -> String {
        return NSLocalizedString("send_message_plain_description", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 通知設定
      /// 
      /// Locales: en, ja
      static func setting_notification_setting(_: Void = ()) -> String {
        return NSLocalizedString("setting_notification_setting", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 重要性スコア
      /// 
      /// Locales: en, ja
      static func wallet_detail_importance(_: Void = ()) -> String {
        return NSLocalizedString("wallet_detail_importance", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 金額
      /// 
      /// Locales: en, ja
      static func common_amount(_: Void = ()) -> String {
        return NSLocalizedString("common_amount", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 金額の指定
      /// 
      /// Locales: en, ja
      static func qrlab_amount_title(_: Void = ()) -> String {
        return NSLocalizedString("qrlab_amount_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 金額を入力
      /// 
      /// Locales: en, ja
      static func send_amount_title(_: Void = ()) -> String {
        return NSLocalizedString("send_amount_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 開けゴマ！ 1. NEMの秘密鍵を入力する。 もしくはQRコードで読み取りましょう。 2. あなたのNEMアカウントをラクーンにリンクします！
      /// 
      /// Locales: en, ja
      static func wallet_import_message(_: Void = ()) -> String {
        return NSLocalizedString("wallet_import_message", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 開発の励みになるよ〜
      /// 
      /// Locales: en, ja
      static func donation_detail_title(_: Void = ()) -> String {
        return NSLocalizedString("donation_detail_title", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 顔認証
      /// 
      /// Locales: en, ja
      static func common_faceID(_: Void = ()) -> String {
        return NSLocalizedString("common_faceID", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _WalletBar.validate()
      try _HarvestView.validate()
      try _BalanceCard.validate()
      try _TransactionView.validate()
    }
    
    struct _BalanceCard: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BalanceCard"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_balance", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_balance' is used in nib 'BalanceCard', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _Calculator: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Calculator"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HarvestView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HarvestView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_harvest_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_harvest_small' is used in nib 'HarvestView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PinNumberView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PinNumberView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SendAmountPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SendAmountPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionListHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionListHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TransactionListHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionListHeader
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_transaction_receive_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transaction_receive_red' is used in nib 'TransactionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_multisignature_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_multisignature_red' is used in nib 'TransactionView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _WalletBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_walletbar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_walletbar' is used in nib 'WalletBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet' is used in nib 'WalletBar', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try lessonExpertStoryboard.validate()
      try sendAmountStoryboard.validate()
      try qrLabTabStoryboard.validate()
      try mosaicListStoryboard.validate()
      try walletDeleteStoryboard.validate()
      try walletDetailStoryboard.validate()
      try settingTopStoryboard.validate()
      try topStoryboard.validate()
      try walletNewNameStoryboard.validate()
      try introductionMessageStoryboard.validate()
      try qrLabAmountStoryboard.validate()
      try walletNewCompletedStoryboard.validate()
      try sendConfirmationStoryboard.validate()
      try lessonIntroductionStoryboard.validate()
      try transactionListStoryboard.validate()
      try sendEndStoryboard.validate()
      try scanTabStoryboard.validate()
      try transactionDetailStoryboard.validate()
      try walletImportEndStoryboard.validate()
      try qrScannerDialogStoryboard.validate()
      try walletBackupCautionStoryboard.validate()
      try pinDialogStoryboard.validate()
      try lessonPinEndStoryboard.validate()
      try qrLabInvoiceStoryboard.validate()
      try walletImportNanoPasswordStoryboard.validate()
      try sendModeStoryboard.validate()
      try balanceDetailStoryboard.validate()
      try donationDetailStoryboard.validate()
      try donationTopStoryboard.validate()
      try walletRenameStoryboard.validate()
      try walletSelectStoryboard.validate()
      try lessonBeginnerStoryboard.validate()
      try walletImportNameStoryboard.validate()
      try aboutStoryboard.validate()
      try walletImportKeyStoryboard.validate()
      try walletAddressStoryboard.validate()
      try walletCreationTypeStoryboard.validate()
      try lessonBeginnerBackupEndStoryboard.validate()
      try navigationDrawerStoryboard.validate()
      try lessonImporterStoryboard.validate()
      try walletNewEndStoryboard.validate()
      try lessonLevelStoryboard.validate()
      try lessonEndStoryboard.validate()
      try walletBackupStoryboard.validate()
      try sendTabStoryboard.validate()
      try launchScreen.validate()
      try homeTabStoryboard.validate()
      try mosaicDetailStoryboard.validate()
      try sendMessageTypeStoryboard.validate()
      try receiveTabStoryboard.validate()
      try introductionConceptStoryboard.validate()
      try walletSettingStoryboard.validate()
      try nodeSelectStoryboard.validate()
      try messageDialogStoryboard.validate()
      try sendMessageStoryboard.validate()
    }
    
    struct aboutStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutView = StoryboardViewControllerResource<AboutViewController>(identifier: "AboutView")
      let bundle = R.hostingBundle
      let name = "AboutStoryboard"
      
      func aboutView(_: Void = ()) -> AboutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "about_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'about_logo' is used in storyboard 'AboutStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "about_open_external") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'about_open_external' is used in storyboard 'AboutStoryboard', but couldn't be loaded.") }
        if _R.storyboard.aboutStoryboard().aboutView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutView' could not be loaded from storyboard 'AboutStoryboard' as 'AboutViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct balanceDetailStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let balanceDetailView = StoryboardViewControllerResource<BalanceDetailViewController>(identifier: "BalanceDetailView")
      let bundle = R.hostingBundle
      let name = "BalanceDetailStoryboard"
      
      func balanceDetailView(_: Void = ()) -> BalanceDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: balanceDetailView)
      }
      
      static func validate() throws {
        if _R.storyboard.balanceDetailStoryboard().balanceDetailView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'balanceDetailView' could not be loaded from storyboard 'BalanceDetailStoryboard' as 'BalanceDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct donationDetailStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let donationDetailView = StoryboardViewControllerResource<DonationDetailViewController>(identifier: "DonationDetailView")
      let name = "DonationDetailStoryboard"
      
      func donationDetailView(_: Void = ()) -> DonationDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: donationDetailView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_harvest_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_harvest_background' is used in storyboard 'DonationDetailStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_yuki") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_yuki' is used in storyboard 'DonationDetailStoryboard', but couldn't be loaded.") }
        if _R.storyboard.donationDetailStoryboard().donationDetailView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'donationDetailView' could not be loaded from storyboard 'DonationDetailStoryboard' as 'DonationDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct donationTopStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let donationTopView = StoryboardViewControllerResource<DonationTopViewController>(identifier: "DonationTopView")
      let name = "DonationTopStoryboard"
      
      func donationTopView(_: Void = ()) -> DonationTopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: donationTopView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_rhime") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_rhime' is used in storyboard 'DonationTopStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_ryuta") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_ryuta' is used in storyboard 'DonationTopStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_harvest_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_harvest_background' is used in storyboard 'DonationTopStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_yuki") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_yuki' is used in storyboard 'DonationTopStoryboard', but couldn't be loaded.") }
        if _R.storyboard.donationTopStoryboard().donationTopView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'donationTopView' could not be loaded from storyboard 'DonationTopStoryboard' as 'DonationTopViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct homeTabStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeTabViewController
      
      let bundle = R.hostingBundle
      let homeTabView = StoryboardViewControllerResource<HomeTabViewController>(identifier: "homeTabView")
      let name = "HomeTabStoryboard"
      
      func homeTabView(_: Void = ()) -> HomeTabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeTabView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_empty1_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_empty1_small' is used in storyboard 'HomeTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_empty2_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_empty2_small' is used in storyboard 'HomeTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_home_harvest") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_home_harvest' is used in storyboard 'HomeTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_home_transaction") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_home_transaction' is used in storyboard 'HomeTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottom_nav_home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottom_nav_home' is used in storyboard 'HomeTabStoryboard', but couldn't be loaded.") }
        if _R.storyboard.homeTabStoryboard().homeTabView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeTabView' could not be loaded from storyboard 'HomeTabStoryboard' as 'HomeTabViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct introductionConceptStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let introductionConceptView = StoryboardViewControllerResource<IntroductionConceptViewController>(identifier: "IntroductionConceptView")
      let name = "IntroductionConceptStoryboard"
      
      func introductionConceptView(_: Void = ()) -> IntroductionConceptViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introductionConceptView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_www_human") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_www_human' is used in storyboard 'IntroductionConceptStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_key") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_key' is used in storyboard 'IntroductionConceptStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_raccoon_color") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_raccoon_color' is used in storyboard 'IntroductionConceptStoryboard', but couldn't be loaded.") }
        if _R.storyboard.introductionConceptStoryboard().introductionConceptView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introductionConceptView' could not be loaded from storyboard 'IntroductionConceptStoryboard' as 'IntroductionConceptViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct introductionMessageStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let introductionMessageView = StoryboardViewControllerResource<IntroductionMessageViewController>(identifier: "IntroductionMessageView")
      let name = "IntroductionMessageStoryboard"
      
      func introductionMessageView(_: Void = ()) -> IntroductionMessageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introductionMessageView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_logo' is used in storyboard 'IntroductionMessageStoryboard', but couldn't be loaded.") }
        if _R.storyboard.introductionMessageStoryboard().introductionMessageView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introductionMessageView' could not be loaded from storyboard 'IntroductionMessageStoryboard' as 'IntroductionMessageViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "top_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_icon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct lessonBeginnerBackupEndStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let lessonBeginnerBackupEndView = StoryboardViewControllerResource<LessonBeginnerBackupEndViewController>(identifier: "LessonBeginnerBackupEndView")
      let name = "LessonBeginnerBackupEndStoryboard"
      
      func lessonBeginnerBackupEndView(_: Void = ()) -> LessonBeginnerBackupEndViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lessonBeginnerBackupEndView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_logo' is used in storyboard 'LessonBeginnerBackupEndStoryboard', but couldn't be loaded.") }
        if _R.storyboard.lessonBeginnerBackupEndStoryboard().lessonBeginnerBackupEndView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lessonBeginnerBackupEndView' could not be loaded from storyboard 'LessonBeginnerBackupEndStoryboard' as 'LessonBeginnerBackupEndViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct lessonBeginnerStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let lessonBeginnerView = StoryboardViewControllerResource<LessonBeginnerViewController>(identifier: "LessonBeginnerView")
      let name = "LessonBeginnerStoryboard"
      
      func lessonBeginnerView(_: Void = ()) -> LessonBeginnerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lessonBeginnerView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_logo' is used in storyboard 'LessonBeginnerStoryboard', but couldn't be loaded.") }
        if _R.storyboard.lessonBeginnerStoryboard().lessonBeginnerView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lessonBeginnerView' could not be loaded from storyboard 'LessonBeginnerStoryboard' as 'LessonBeginnerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct lessonEndStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let lessonEndView = StoryboardViewControllerResource<LessonEndViewController>(identifier: "LessonEndView")
      let name = "LessonEndStoryboard"
      
      func lessonEndView(_: Void = ()) -> LessonEndViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lessonEndView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_logo' is used in storyboard 'LessonEndStoryboard', but couldn't be loaded.") }
        if _R.storyboard.lessonEndStoryboard().lessonEndView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lessonEndView' could not be loaded from storyboard 'LessonEndStoryboard' as 'LessonEndViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct lessonExpertStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let lessonExpertView = StoryboardViewControllerResource<LessonExpertViewController>(identifier: "LessonExpertView")
      let name = "LessonExpertStoryboard"
      
      func lessonExpertView(_: Void = ()) -> LessonExpertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lessonExpertView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_logo' is used in storyboard 'LessonExpertStoryboard', but couldn't be loaded.") }
        if _R.storyboard.lessonExpertStoryboard().lessonExpertView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lessonExpertView' could not be loaded from storyboard 'LessonExpertStoryboard' as 'LessonExpertViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct lessonImporterStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let lessonImporterView = StoryboardViewControllerResource<LessonImporterViewController>(identifier: "LessonImporterView")
      let name = "LessonImporterStoryboard"
      
      func lessonImporterView(_: Void = ()) -> LessonImporterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lessonImporterView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_logo' is used in storyboard 'LessonImporterStoryboard', but couldn't be loaded.") }
        if _R.storyboard.lessonImporterStoryboard().lessonImporterView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lessonImporterView' could not be loaded from storyboard 'LessonImporterStoryboard' as 'LessonImporterViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct lessonIntroductionStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let lessonIntroductionView = StoryboardViewControllerResource<LessonIntroductionViewController>(identifier: "LessonIntroductionView")
      let name = "LessonIntroductionStoryboard"
      
      func lessonIntroductionView(_: Void = ()) -> LessonIntroductionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lessonIntroductionView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_logo' is used in storyboard 'LessonIntroductionStoryboard', but couldn't be loaded.") }
        if _R.storyboard.lessonIntroductionStoryboard().lessonIntroductionView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lessonIntroductionView' could not be loaded from storyboard 'LessonIntroductionStoryboard' as 'LessonIntroductionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct lessonLevelStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let lessonLevelView = StoryboardViewControllerResource<LessonLevelViewController>(identifier: "LessonLevelView")
      let name = "LessonLevelStoryboard"
      
      func lessonLevelView(_: Void = ()) -> LessonLevelViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lessonLevelView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_raccoon_color") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_raccoon_color' is used in storyboard 'LessonLevelStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_lesson_card1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_lesson_card1' is used in storyboard 'LessonLevelStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_lesson_card2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_lesson_card2' is used in storyboard 'LessonLevelStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_lesson_card3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_lesson_card3' is used in storyboard 'LessonLevelStoryboard', but couldn't be loaded.") }
        if _R.storyboard.lessonLevelStoryboard().lessonLevelView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lessonLevelView' could not be loaded from storyboard 'LessonLevelStoryboard' as 'LessonLevelViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct lessonPinEndStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let lessonPinEndView = StoryboardViewControllerResource<LessonPinEndViewController>(identifier: "LessonPinEndView")
      let name = "LessonPinEndStoryboard"
      
      func lessonPinEndView(_: Void = ()) -> LessonPinEndViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lessonPinEndView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_logo' is used in storyboard 'LessonPinEndStoryboard', but couldn't be loaded.") }
        if _R.storyboard.lessonPinEndStoryboard().lessonPinEndView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lessonPinEndView' could not be loaded from storyboard 'LessonPinEndStoryboard' as 'LessonPinEndViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messageDialogStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let messageDialogView = StoryboardViewControllerResource<MessageDialogViewController>(identifier: "MessageDialogView")
      let name = "MessageDialogStoryboard"
      
      func messageDialogView(_: Void = ()) -> MessageDialogViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messageDialogView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_raccoon_color") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_raccoon_color' is used in storyboard 'MessageDialogStoryboard', but couldn't be loaded.") }
        if _R.storyboard.messageDialogStoryboard().messageDialogView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messageDialogView' could not be loaded from storyboard 'MessageDialogStoryboard' as 'MessageDialogViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mosaicDetailStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mosaicDetailView = StoryboardViewControllerResource<MosaicDetailViewController>(identifier: "MosaicDetailView")
      let name = "MosaicDetailStoryboard"
      
      func mosaicDetailView(_: Void = ()) -> MosaicDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mosaicDetailView)
      }
      
      static func validate() throws {
        if _R.storyboard.mosaicDetailStoryboard().mosaicDetailView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mosaicDetailView' could not be loaded from storyboard 'MosaicDetailStoryboard' as 'MosaicDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mosaicListStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mosaicListView = StoryboardViewControllerResource<MosaicListViewController>(identifier: "MosaicListView")
      let name = "MosaicListStoryboard"
      
      func mosaicListView(_: Void = ()) -> MosaicListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mosaicListView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_empty2_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_empty2_large' is used in storyboard 'MosaicListStoryboard', but couldn't be loaded.") }
        if _R.storyboard.mosaicListStoryboard().mosaicListView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mosaicListView' could not be loaded from storyboard 'MosaicListStoryboard' as 'MosaicListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct navigationDrawerStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NavigationDrawerStoryboard"
      let navigationDrawerView = StoryboardViewControllerResource<NavigationDrawerViewController>(identifier: "NavigationDrawerView")
      
      func navigationDrawerView(_: Void = ()) -> NavigationDrawerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navigationDrawerView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_menu_home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu_home' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "drawer_account_image_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'drawer_account_image_default' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu_mosaic") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu_mosaic' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu_donate") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu_donate' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu_about") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu_about' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu_addressbook") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu_addressbook' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "account_icon_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'account_icon_default' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu_setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu_setting' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_menu_help") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_menu_help' is used in storyboard 'NavigationDrawerStoryboard', but couldn't be loaded.") }
        if _R.storyboard.navigationDrawerStoryboard().navigationDrawerView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navigationDrawerView' could not be loaded from storyboard 'NavigationDrawerStoryboard' as 'NavigationDrawerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct nodeSelectStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NodeSelectStoryboard"
      let nodeSelectView = StoryboardViewControllerResource<NodeSelectViewController>(identifier: "NodeSelectView")
      
      func nodeSelectView(_: Void = ()) -> NodeSelectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nodeSelectView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_setting_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_setting_large' is used in storyboard 'NodeSelectStoryboard', but couldn't be loaded.") }
        if _R.storyboard.nodeSelectStoryboard().nodeSelectView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nodeSelectView' could not be loaded from storyboard 'NodeSelectStoryboard' as 'NodeSelectViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pinDialogStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PinDialogStoryboard"
      let pinDialogView = StoryboardViewControllerResource<PinDialogViewController>(identifier: "PinDialogView")
      
      func pinDialogView(_: Void = ()) -> PinDialogViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pinDialogView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pin_dialog_delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin_dialog_delete' is used in storyboard 'PinDialogStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_back' is used in storyboard 'PinDialogStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_raccoon_color") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_raccoon_color' is used in storyboard 'PinDialogStoryboard', but couldn't be loaded.") }
        if _R.storyboard.pinDialogStoryboard().pinDialogView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pinDialogView' could not be loaded from storyboard 'PinDialogStoryboard' as 'PinDialogViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct qrLabAmountStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QrLabAmountStoryboard"
      let qrLabAmountView = StoryboardViewControllerResource<QrLabAmountViewController>(identifier: "QrLabAmountView")
      
      func qrLabAmountView(_: Void = ()) -> QrLabAmountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrLabAmountView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_recycle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_recycle' is used in storyboard 'QrLabAmountStoryboard', but couldn't be loaded.") }
        if _R.storyboard.qrLabAmountStoryboard().qrLabAmountView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrLabAmountView' could not be loaded from storyboard 'QrLabAmountStoryboard' as 'QrLabAmountViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct qrLabInvoiceStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QrLabInvoiceStoryboard"
      let qrLabInvoiceView = StoryboardViewControllerResource<QrLabInvoiceViewController>(identifier: "QrLabInvoiceView")
      
      func qrLabInvoiceView(_: Void = ()) -> QrLabInvoiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrLabInvoiceView)
      }
      
      static func validate() throws {
        if _R.storyboard.qrLabInvoiceStoryboard().qrLabInvoiceView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrLabInvoiceView' could not be loaded from storyboard 'QrLabInvoiceStoryboard' as 'QrLabInvoiceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct qrLabTabStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QrLabTabStoryboard"
      let qrLabTabView = StoryboardViewControllerResource<QrLabViewController>(identifier: "QrLabTabView")
      
      func qrLabTabView(_: Void = ()) -> QrLabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrLabTabView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_list") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_list' is used in storyboard 'QrLabTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottom_nav_qr_lab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottom_nav_qr_lab' is used in storyboard 'QrLabTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_dentaku") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_dentaku' is used in storyboard 'QrLabTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_register_84px") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_register_84px' is used in storyboard 'QrLabTabStoryboard', but couldn't be loaded.") }
        if _R.storyboard.qrLabTabStoryboard().qrLabTabView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrLabTabView' could not be loaded from storyboard 'QrLabTabStoryboard' as 'QrLabViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct qrScannerDialogStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QrScannerDialogStoryboard"
      let qrScannerDialogView = StoryboardViewControllerResource<QrScannerDialogViewController>(identifier: "QrScannerDialogView")
      
      func qrScannerDialogView(_: Void = ()) -> QrScannerDialogViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrScannerDialogView)
      }
      
      static func validate() throws {
        if _R.storyboard.qrScannerDialogStoryboard().qrScannerDialogView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrScannerDialogView' could not be loaded from storyboard 'QrScannerDialogStoryboard' as 'QrScannerDialogViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct receiveTabStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReceiveTabStoryboard"
      let receiveTabView = StoryboardViewControllerResource<ReceiveTabViewController>(identifier: "ReceiveTabView")
      
      func receiveTabView(_: Void = ()) -> ReceiveTabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: receiveTabView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bottom_nav_receive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottom_nav_receive' is used in storyboard 'ReceiveTabStoryboard', but couldn't be loaded.") }
        if _R.storyboard.receiveTabStoryboard().receiveTabView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'receiveTabView' could not be loaded from storyboard 'ReceiveTabStoryboard' as 'ReceiveTabViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct scanTabStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScanTabStoryboard"
      let scanTabView = StoryboardViewControllerResource<ScanTabViewController>(identifier: "ScanTabView")
      
      func scanTabView(_: Void = ()) -> ScanTabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanTabView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bottom_nav_scan") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottom_nav_scan' is used in storyboard 'ScanTabStoryboard', but couldn't be loaded.") }
        if _R.storyboard.scanTabStoryboard().scanTabView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanTabView' could not be loaded from storyboard 'ScanTabStoryboard' as 'ScanTabViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendAmountStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendAmountStoryboard"
      let sendAmountView = StoryboardViewControllerResource<SendAmountViewController>(identifier: "SendAmountView")
      
      func sendAmountView(_: Void = ()) -> SendAmountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendAmountView)
      }
      
      static func validate() throws {
        if _R.storyboard.sendAmountStoryboard().sendAmountView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendAmountView' could not be loaded from storyboard 'SendAmountStoryboard' as 'SendAmountViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendConfirmationStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendConfirmationStoryboard"
      let sendConfirmationView = StoryboardViewControllerResource<SendConfirmationViewController>(identifier: "SendConfirmationView")
      
      func sendConfirmationView(_: Void = ()) -> SendConfirmationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendConfirmationView)
      }
      
      static func validate() throws {
        if _R.storyboard.sendConfirmationStoryboard().sendConfirmationView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendConfirmationView' could not be loaded from storyboard 'SendConfirmationStoryboard' as 'SendConfirmationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendEndStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendEndStoryboard"
      let sendEndView = StoryboardViewControllerResource<SendEndViewController>(identifier: "SendEndView")
      
      func sendEndView(_: Void = ()) -> SendEndViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendEndView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_send_end_transaction") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_send_end_transaction' is used in storyboard 'SendEndStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_transaction_background_top") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_transaction_background_top' is used in storyboard 'SendEndStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_raccoon_watermark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_raccoon_watermark' is used in storyboard 'SendEndStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_send_end_home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_send_end_home' is used in storyboard 'SendEndStoryboard', but couldn't be loaded.") }
        if _R.storyboard.sendEndStoryboard().sendEndView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendEndView' could not be loaded from storyboard 'SendEndStoryboard' as 'SendEndViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendMessageStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendMessageStoryboard"
      let sendMessageView = StoryboardViewControllerResource<SendMessageViewController>(identifier: "SendMessageView")
      
      func sendMessageView(_: Void = ()) -> SendMessageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendMessageView)
      }
      
      static func validate() throws {
        if _R.storyboard.sendMessageStoryboard().sendMessageView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendMessageView' could not be loaded from storyboard 'SendMessageStoryboard' as 'SendMessageViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendMessageTypeStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendMessageTypeStoryboard"
      let sendMessageTypeView = StoryboardViewControllerResource<SendMessageTypeViewController>(identifier: "SendMessageTypeView")
      
      func sendMessageTypeView(_: Void = ()) -> SendMessageTypeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendMessageTypeView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_send_message_encrypted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_send_message_encrypted' is used in storyboard 'SendMessageTypeStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_caution") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_caution' is used in storyboard 'SendMessageTypeStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_send_message_plain") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_send_message_plain' is used in storyboard 'SendMessageTypeStoryboard', but couldn't be loaded.") }
        if _R.storyboard.sendMessageTypeStoryboard().sendMessageTypeView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendMessageTypeView' could not be loaded from storyboard 'SendMessageTypeStoryboard' as 'SendMessageTypeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendModeStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendModeStoryboard"
      let sendModeView = StoryboardViewControllerResource<SendModeViewController>(identifier: "SendModeView")
      
      func sendModeView(_: Void = ()) -> SendModeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendModeView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_send_mode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_send_mode' is used in storyboard 'SendModeStoryboard', but couldn't be loaded.") }
        if _R.storyboard.sendModeStoryboard().sendModeView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendModeView' could not be loaded from storyboard 'SendModeStoryboard' as 'SendModeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendTabStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendTabStoryboard"
      let sendTabView = StoryboardViewControllerResource<SendTabViewController>(identifier: "SendTabView")
      
      func sendTabView(_: Void = ()) -> SendTabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendTabView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_clipboard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_clipboard' is used in storyboard 'SendTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottom_nav_send") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottom_nav_send' is used in storyboard 'SendTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heroimage_send_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_send_large' is used in storyboard 'SendTabStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close_circle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close_circle' is used in storyboard 'SendTabStoryboard', but couldn't be loaded.") }
        if _R.storyboard.sendTabStoryboard().sendTabView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendTabView' could not be loaded from storyboard 'SendTabStoryboard' as 'SendTabViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settingTopStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SettingTopStoryboard"
      let settingTopView = StoryboardViewControllerResource<SettingTopViewController>(identifier: "SettingTopView")
      
      func settingTopView(_: Void = ()) -> SettingTopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingTopView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_setting_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_setting_large' is used in storyboard 'SettingTopStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_node") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_node' is used in storyboard 'SettingTopStoryboard', but couldn't be loaded.") }
        if _R.storyboard.settingTopStoryboard().settingTopView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingTopView' could not be loaded from storyboard 'SettingTopStoryboard' as 'SettingTopViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct topStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TopViewController
      
      let bundle = R.hostingBundle
      let name = "TopStoryboard"
      let topView = StoryboardViewControllerResource<TopViewController>(identifier: "TopView")
      
      func topView(_: Void = ()) -> TopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topView)
      }
      
      static func validate() throws {
        if _R.storyboard.topStoryboard().topView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topView' could not be loaded from storyboard 'TopStoryboard' as 'TopViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct transactionDetailStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionDetailStoryboard"
      let transactionDetailView = StoryboardViewControllerResource<TransactionDetailViewController>(identifier: "TransactionDetailView")
      
      func transactionDetailView(_: Void = ()) -> TransactionDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionDetailView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_transaction_unconfirmed") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transaction_unconfirmed' is used in storyboard 'TransactionDetailStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_transaction_receive_green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transaction_receive_green' is used in storyboard 'TransactionDetailStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_transaction_check") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transaction_check' is used in storyboard 'TransactionDetailStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_check_gray_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_check_gray_on' is used in storyboard 'TransactionDetailStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_multisignature_green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_multisignature_green' is used in storyboard 'TransactionDetailStoryboard', but couldn't be loaded.") }
        if _R.storyboard.transactionDetailStoryboard().transactionDetailView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionDetailView' could not be loaded from storyboard 'TransactionDetailStoryboard' as 'TransactionDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct transactionListStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionListStoryboard"
      let transactionListView = StoryboardViewControllerResource<TransactionListViewController>(identifier: "TransactionListView")
      
      func transactionListView(_: Void = ()) -> TransactionListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionListView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_transaction_unconfirmed") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transaction_unconfirmed' is used in storyboard 'TransactionListStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_transaction_receive_green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transaction_receive_green' is used in storyboard 'TransactionListStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_transaction_check") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transaction_check' is used in storyboard 'TransactionListStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_check_gray_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_check_gray_on' is used in storyboard 'TransactionListStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_multisignature_green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_multisignature_green' is used in storyboard 'TransactionListStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_empty1_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_empty1_large' is used in storyboard 'TransactionListStoryboard', but couldn't be loaded.") }
        if _R.storyboard.transactionListStoryboard().transactionListView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionListView' could not be loaded from storyboard 'TransactionListStoryboard' as 'TransactionListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletAddressStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletAddressStoryboard"
      let walletAddressView = StoryboardViewControllerResource<WalletAddressViewController>(identifier: "WalletAddressView")
      
      func walletAddressView(_: Void = ()) -> WalletAddressViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletAddressView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_send_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_send_small' is used in storyboard 'WalletAddressStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletAddressStoryboard().walletAddressView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletAddressView' could not be loaded from storyboard 'WalletAddressStoryboard' as 'WalletAddressViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletBackupCautionStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletBackupCautionStoryboard"
      let walletBackupCautionView = StoryboardViewControllerResource<WalletBackupCautionViewController>(identifier: "WalletBackupCautionView")
      
      func walletBackupCautionView(_: Void = ()) -> WalletBackupCautionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletBackupCautionView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_caution") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_caution' is used in storyboard 'WalletBackupCautionStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heroimage_wallet_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_wallet_small' is used in storyboard 'WalletBackupCautionStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletBackupCautionStoryboard().walletBackupCautionView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletBackupCautionView' could not be loaded from storyboard 'WalletBackupCautionStoryboard' as 'WalletBackupCautionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletBackupStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletBackupStoryboard"
      let walletBackupView = StoryboardViewControllerResource<WalletBackupViewController>(identifier: "WalletBackupView")
      
      func walletBackupView(_: Void = ()) -> WalletBackupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletBackupView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_caution") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_caution' is used in storyboard 'WalletBackupStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heroimage_wallet_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_wallet_small' is used in storyboard 'WalletBackupStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletBackupStoryboard().walletBackupView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletBackupView' could not be loaded from storyboard 'WalletBackupStoryboard' as 'WalletBackupViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletCreationTypeStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletCreationTypeStoryboard"
      let walletCreationTypeView = StoryboardViewControllerResource<WalletCreationTypeViewController>(identifier: "WalletCreationTypeView")
      
      func walletCreationTypeView(_: Void = ()) -> WalletCreationTypeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletCreationTypeView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_new_card") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_new_card' is used in storyboard 'WalletCreationTypeStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heroimage_login_card") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_login_card' is used in storyboard 'WalletCreationTypeStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletCreationTypeStoryboard().walletCreationTypeView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletCreationTypeView' could not be loaded from storyboard 'WalletCreationTypeStoryboard' as 'WalletCreationTypeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletDeleteStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletDeleteStoryboard"
      let walletDeleteView = StoryboardViewControllerResource<WalletDeleteViewController>(identifier: "WalletDeleteView")
      
      func walletDeleteView(_: Void = ()) -> WalletDeleteViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletDeleteView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_caution") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_caution' is used in storyboard 'WalletDeleteStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heroimage_wallet_small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_wallet_small' is used in storyboard 'WalletDeleteStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletDeleteStoryboard().walletDeleteView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletDeleteView' could not be loaded from storyboard 'WalletDeleteStoryboard' as 'WalletDeleteViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletDetailStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletDetailStoryboard"
      let walletDetailView = StoryboardViewControllerResource<WalletDetailViewController>(identifier: "WalletDetailView")
      
      func walletDetailView(_: Void = ()) -> WalletDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletDetailView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_wallet_large2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_wallet_large2' is used in storyboard 'WalletDetailStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletDetailStoryboard().walletDetailView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletDetailView' could not be loaded from storyboard 'WalletDetailStoryboard' as 'WalletDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletImportEndStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletImportEndStoryboard"
      let walletImportEndView = StoryboardViewControllerResource<WalletImportEndViewController>(identifier: "WalletImportEndView")
      
      func walletImportEndView(_: Void = ()) -> WalletImportEndViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletImportEndView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_login_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_login_large' is used in storyboard 'WalletImportEndStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletImportEndStoryboard().walletImportEndView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletImportEndView' could not be loaded from storyboard 'WalletImportEndStoryboard' as 'WalletImportEndViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletImportKeyStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletImportKeyStoryboard"
      let walletImportKeyView = StoryboardViewControllerResource<WalletImportKeyViewController>(identifier: "WalletImportKeyView")
      
      func walletImportKeyView(_: Void = ()) -> WalletImportKeyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletImportKeyView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_login_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_login_large' is used in storyboard 'WalletImportKeyStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_scan") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_scan' is used in storyboard 'WalletImportKeyStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletImportKeyStoryboard().walletImportKeyView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletImportKeyView' could not be loaded from storyboard 'WalletImportKeyStoryboard' as 'WalletImportKeyViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletImportNameStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletImportNameStoryboard"
      let walletImportNameView = StoryboardViewControllerResource<WalletImportNameViewController>(identifier: "WalletImportNameView")
      
      func walletImportNameView(_: Void = ()) -> WalletImportNameViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletImportNameView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_login_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_login_large' is used in storyboard 'WalletImportNameStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletImportNameStoryboard().walletImportNameView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletImportNameView' could not be loaded from storyboard 'WalletImportNameStoryboard' as 'WalletImportNameViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletImportNanoPasswordStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletImportNanoPasswordStoryboard"
      let walletImportNanoPasswordView = StoryboardViewControllerResource<WalletImportNanoPasswordViewController>(identifier: "WalletImportNanoPasswordView")
      
      func walletImportNanoPasswordView(_: Void = ()) -> WalletImportNanoPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletImportNanoPasswordView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "top_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'top_icon' is used in storyboard 'WalletImportNanoPasswordStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletImportNanoPasswordStoryboard().walletImportNanoPasswordView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletImportNanoPasswordView' could not be loaded from storyboard 'WalletImportNanoPasswordStoryboard' as 'WalletImportNanoPasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletNewCompletedStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletNewCompletedStoryboard"
      let walletNewCompletedView = StoryboardViewControllerResource<WalletNewCompletedViewController>(identifier: "WalletNewCompletedView")
      
      func walletNewCompletedView(_: Void = ()) -> WalletNewCompletedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletNewCompletedView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_new_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_new_large' is used in storyboard 'WalletNewCompletedStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletNewCompletedStoryboard().walletNewCompletedView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletNewCompletedView' could not be loaded from storyboard 'WalletNewCompletedStoryboard' as 'WalletNewCompletedViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletNewEndStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletNewEndStoryboard"
      let walletNewEndView = StoryboardViewControllerResource<WalletNewEndViewController>(identifier: "WalletNewEndView")
      
      func walletNewEndView(_: Void = ()) -> WalletNewEndViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletNewEndView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_new_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_new_large' is used in storyboard 'WalletNewEndStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletNewEndStoryboard().walletNewEndView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletNewEndView' could not be loaded from storyboard 'WalletNewEndStoryboard' as 'WalletNewEndViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletNewNameStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletNewNameStoryboard"
      let walletNewNameView = StoryboardViewControllerResource<WalletNewNameViewController>(identifier: "WalletNewNameView")
      
      func walletNewNameView(_: Void = ()) -> WalletNewNameViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletNewNameView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_new_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_new_large' is used in storyboard 'WalletNewNameStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletNewNameStoryboard().walletNewNameView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletNewNameView' could not be loaded from storyboard 'WalletNewNameStoryboard' as 'WalletNewNameViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletRenameStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletRenameStoryboard"
      let walletRenameView = StoryboardViewControllerResource<WalletRenameViewController>(identifier: "WalletRenameView")
      
      func walletRenameView(_: Void = ()) -> WalletRenameViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletRenameView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_walletbar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_walletbar' is used in storyboard 'WalletRenameStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heroimage_wallet_large2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_wallet_large2' is used in storyboard 'WalletRenameStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletRenameStoryboard().walletRenameView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletRenameView' could not be loaded from storyboard 'WalletRenameStoryboard' as 'WalletRenameViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletSelectStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletSelectStoryboard"
      let walletSelectView = StoryboardViewControllerResource<WalletSelectViewController>(identifier: "WalletSelectView")
      
      func walletSelectView(_: Void = ()) -> WalletSelectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletSelectView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_wallet_16x16") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_16x16' is used in storyboard 'WalletSelectStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heroimage_wallet_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_wallet_large' is used in storyboard 'WalletSelectStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image_empty2_large") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_empty2_large' is used in storyboard 'WalletSelectStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletSelectStoryboard().walletSelectView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletSelectView' could not be loaded from storyboard 'WalletSelectStoryboard' as 'WalletSelectViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletSettingStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletSettingStoryboard"
      let walletSettingView = StoryboardViewControllerResource<WalletSettingViewController>(identifier: "WalletSettingView")
      
      func walletSettingView(_: Void = ()) -> WalletSettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletSettingView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "heroimage_wallet_large2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heroimage_wallet_large2' is used in storyboard 'WalletSettingStoryboard', but couldn't be loaded.") }
        if _R.storyboard.walletSettingStoryboard().walletSettingView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletSettingView' could not be loaded from storyboard 'WalletSettingStoryboard' as 'WalletSettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
